// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'ServiceManager.ice'.</auto-generated>
// clang-format off

#ifndef IceBox_ServiceManager_h_
#define IceBox_ServiceManager_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/BuiltinSequences.h>
#include <IceBox/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEBOX_API
#   if defined(ICEBOX_API_EXPORTS)
#       define ICEBOX_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEBOX_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

/// Host multiple independent services in the same Ice server.
namespace IceBox
{
    class ServiceObserverPrx;

    class ServiceManagerPrx;
}

namespace IceBox
{
    /// Observes the status of services in an IceBox server.
    /// @remarks This interface is implemented by admin tools that monitor the IceBox server.
    /// @see ServiceManager#addObserver
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API ServiceObserverPrx : public Ice::Proxy<ServiceObserverPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        ServiceObserverPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        ServiceObserverPrx(const ServiceObserverPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        ServiceObserverPrx(ServiceObserverPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~ServiceObserverPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        ServiceObserverPrx& operator=(const ServiceObserverPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        ServiceObserverPrx& operator=(ServiceObserverPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Receives the names of the services that were started.
        /// @param services The names of the services that were started.
        /// @param context The request context.
        void servicesStarted(const ::Ice::StringSeq& services, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Receives the names of the services that were started.
        /// @param services The names of the services that were started.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> servicesStartedAsync(const ::Ice::StringSeq& services, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Receives the names of the services that were started.
        /// @param services The names of the services that were started.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> servicesStartedAsync(const ::Ice::StringSeq& services, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_servicesStarted(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const ::Ice::StringSeq&, const Ice::Context&) const;

        /// Receives the names of the services that were stopped.
        /// @param services The names of the services that were stopped.
        /// @param context The request context.
        void servicesStopped(const ::Ice::StringSeq& services, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Receives the names of the services that were stopped.
        /// @param services The names of the services that were stopped.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> servicesStoppedAsync(const ::Ice::StringSeq& services, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Receives the names of the services that were stopped.
        /// @param services The names of the services that were stopped.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> servicesStoppedAsync(const ::Ice::StringSeq& services, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_servicesStopped(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const ::Ice::StringSeq&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceBox::ServiceObserver"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static ServiceObserverPrx _fromReference(IceInternal::ReferencePtr ref) { return ServiceObserverPrx{std::move(ref)}; }

    protected:
        /// @private
        ServiceObserverPrx() = default;

        /// @private
        explicit ServiceObserverPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };

    /// Administers the services of an IceBox server.
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API ServiceManagerPrx : public Ice::Proxy<ServiceManagerPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        ServiceManagerPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        ServiceManagerPrx(const ServiceManagerPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        ServiceManagerPrx(ServiceManagerPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~ServiceManagerPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        ServiceManagerPrx& operator=(const ServiceManagerPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        ServiceManagerPrx& operator=(ServiceManagerPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Starts a service.
        /// @param service The service name.
        /// @param context The request context.
        /// @throws IceBox::AlreadyStartedException Thrown when the service is already running.
        /// @throws IceBox::NoSuchServiceException Thrown when IceBox does not know a service named @p service.
        void startService(std::string_view service, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Starts a service.
        /// @param service The service name.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> startServiceAsync(std::string_view service, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Starts a service.
        /// @param service The service name.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> startServiceAsync(std::string_view service, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_startService(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::string_view, const Ice::Context&) const;

        /// Stops a service.
        /// @param service The service name.
        /// @param context The request context.
        /// @throws IceBox::AlreadyStoppedException Thrown when the service is already stopped.
        /// @throws IceBox::NoSuchServiceException Thrown when IceBox does not know a service named @p service.
        void stopService(std::string_view service, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Stops a service.
        /// @param service The service name.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> stopServiceAsync(std::string_view service, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Stops a service.
        /// @param service The service name.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> stopServiceAsync(std::string_view service, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_stopService(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::string_view, const Ice::Context&) const;

        /// Registers a new observer with this service manager.
        /// @param observer The new observer.
        /// @param context The request context.
        void addObserver(const std::optional<ServiceObserverPrx>& observer, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Registers a new observer with this service manager.
        /// @param observer The new observer.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> addObserverAsync(const std::optional<ServiceObserverPrx>& observer, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Registers a new observer with this service manager.
        /// @param observer The new observer.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> addObserverAsync(const std::optional<ServiceObserverPrx>& observer, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_addObserver(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const std::optional<ServiceObserverPrx>&, const Ice::Context&) const;

        /// Shuts down all services.
        /// @param context The request context.
        void shutdown(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Shuts down all services.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> shutdownAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Shuts down all services.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceBox::ServiceManager"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static ServiceManagerPrx _fromReference(IceInternal::ReferencePtr ref) { return ServiceManagerPrx{std::move(ref)}; }

    protected:
        /// @private
        ServiceManagerPrx() = default;

        /// @private
        explicit ServiceManagerPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };
}

namespace IceBox
{
    /// The exception that is thrown when attempting to start a service that is already running.
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API AlreadyStartedException : public Ice::UserException
    {
    public:
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::IceBox::AlreadyStartedException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };

    /// The exception that is thrown when attempting to stop a service that is already stopped.
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API AlreadyStoppedException : public Ice::UserException
    {
    public:
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::IceBox::AlreadyStoppedException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };

    /// The exception that is thrown when a service name does not refer to a known service.
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API NoSuchServiceException : public Ice::UserException
    {
    public:
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::IceBox::NoSuchServiceException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };
}

namespace IceBox
{
    /// Observes the status of services in an IceBox server.
    /// @remarks This interface is implemented by admin tools that monitor the IceBox server.
    /// @see ServiceManager#addObserver
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API ServiceObserver : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = ServiceObserverPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Receives the names of the services that were started.
        /// @param services The names of the services that were started.
        /// @param current The Current object of the incoming request.
        virtual void servicesStarted(::Ice::StringSeq services, const Ice::Current& current) = 0;

        /// @private
        void _iceD_servicesStarted(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Receives the names of the services that were stopped.
        /// @param services The names of the services that were stopped.
        /// @param current The Current object of the incoming request.
        virtual void servicesStopped(::Ice::StringSeq services, const Ice::Current& current) = 0;

        /// @private
        void _iceD_servicesStopped(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceBox::ServiceObserver"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a ServiceObserver.
    using ServiceObserverPtr = std::shared_ptr<ServiceObserver>;

    /// Administers the services of an IceBox server.
    /// @headerfile IceBox/IceBox.h
    class ICEBOX_API ServiceManager : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = ServiceManagerPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Starts a service.
        /// @param service The service name.
        /// @param current The Current object of the incoming request.
        /// @throws IceBox::AlreadyStartedException Thrown when the service is already running.
        /// @throws IceBox::NoSuchServiceException Thrown when IceBox does not know a service named @p service.
        virtual void startService(std::string service, const Ice::Current& current) = 0;

        /// @private
        void _iceD_startService(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Stops a service.
        /// @param service The service name.
        /// @param current The Current object of the incoming request.
        /// @throws IceBox::AlreadyStoppedException Thrown when the service is already stopped.
        /// @throws IceBox::NoSuchServiceException Thrown when IceBox does not know a service named @p service.
        virtual void stopService(std::string service, const Ice::Current& current) = 0;

        /// @private
        void _iceD_stopService(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Registers a new observer with this service manager.
        /// @param observer The new observer.
        /// @param current The Current object of the incoming request.
        virtual void addObserver(std::optional<ServiceObserverPrx> observer, const Ice::Current& current) = 0;

        /// @private
        void _iceD_addObserver(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Shuts down all services.
        /// @param current The Current object of the incoming request.
        virtual void shutdown(const Ice::Current& current) = 0;

        /// @private
        void _iceD_shutdown(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceBox::ServiceManager"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a ServiceManager.
    using ServiceManagerPtr = std::shared_ptr<ServiceManager>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
