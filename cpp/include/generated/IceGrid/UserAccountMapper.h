// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'UserAccountMapper.ice'.</auto-generated>
// clang-format off

#ifndef IceGrid_UserAccountMapper_h_
#define IceGrid_UserAccountMapper_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceGrid/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceGrid
{
    class UserAccountMapperPrx;
}

namespace IceGrid
{
    /// Maps user strings in server descriptors to actual user account names. You can configure the user account mapper
    /// of an IceGrid node with the property `IceGrid.Node.UserAccountMapper`.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API UserAccountMapperPrx : public Ice::Proxy<UserAccountMapperPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        UserAccountMapperPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        UserAccountMapperPrx(const UserAccountMapperPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        UserAccountMapperPrx(UserAccountMapperPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~UserAccountMapperPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        UserAccountMapperPrx& operator=(const UserAccountMapperPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        UserAccountMapperPrx& operator=(UserAccountMapperPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Gets the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
        /// account to use to run servers.
        /// @param user The value of the server descriptor's `user` attribute. When this attribute is not defined, and
        /// the server's activation mode is `session`, the default value for `user` is the session identifier.
        /// @param context The request context.
        /// @return The user account name.
        /// @throws IceGrid::UserAccountNotFoundException Thrown when no user account is found for the given user.
        std::string getUserAccount(std::string_view user, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Gets the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
        /// account to use to run servers.
        /// @param user The value of the server descriptor's `user` attribute. When this attribute is not defined, and
        /// the server's activation mode is `session`, the default value for `user` is the session identifier.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - The user account name.
        [[nodiscard]] std::future<std::string> getUserAccountAsync(std::string_view user, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Gets the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
        /// account to use to run servers.
        /// @param user The value of the server descriptor's `user` attribute. When this attribute is not defined, and
        /// the server's activation mode is `session`, the default value for `user` is the session identifier.
        /// @param response The response callback. It accepts:
        /// - The user account name.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> getUserAccountAsync(std::string_view user, std::function<void(std::string)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_getUserAccount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::string>>&, std::string_view, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::UserAccountMapper"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static UserAccountMapperPrx _fromReference(IceInternal::ReferencePtr ref) { return UserAccountMapperPrx{std::move(ref)}; }

    protected:
        /// @private
        UserAccountMapperPrx() = default;

        /// @private
        explicit UserAccountMapperPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };
}

namespace IceGrid
{
    /// The exception that is thrown when a user account for a given session identifier can't be found.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API UserAccountNotFoundException : public Ice::UserException
    {
    public:
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::IceGrid::UserAccountNotFoundException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };
}

namespace IceGrid
{
    /// Maps user strings in server descriptors to actual user account names. You can configure the user account mapper
    /// of an IceGrid node with the property `IceGrid.Node.UserAccountMapper`.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API UserAccountMapper : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = UserAccountMapperPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Gets the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
        /// account to use to run servers.
        /// @param user The value of the server descriptor's `user` attribute. When this attribute is not defined, and
        /// the server's activation mode is `session`, the default value for `user` is the session identifier.
        /// @param current The Current object of the incoming request.
        /// @return The user account name.
        /// @throws IceGrid::UserAccountNotFoundException Thrown when no user account is found for the given user.
        virtual std::string getUserAccount(std::string user, const Ice::Current& current) = 0;

        /// @private
        void _iceD_getUserAccount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::UserAccountMapper"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to an UserAccountMapper.
    using UserAccountMapperPtr = std::shared_ptr<UserAccountMapper>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
