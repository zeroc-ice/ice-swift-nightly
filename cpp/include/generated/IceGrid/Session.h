// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Session.ice'.</auto-generated>
// clang-format off

#ifndef IceGrid_Session_h_
#define IceGrid_Session_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Exception.h"
#include <Glacier2/Session.h>
#include <IceGrid/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceGrid
{
    class RegistryPrx;

    class SessionPrx;
}

namespace IceGrid
{
    /// Represents a session object used by IceGrid clients to allocate and release objects. Client sessions are created
    /// either via the RegistryPrx object or via the registry client `SessionManager` object.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API SessionPrx : public Ice::Proxy<SessionPrx, ::Glacier2::SessionPrx>
    {
    public:
#if defined(__GNUC__) && !defined(__clang__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        SessionPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        SessionPrx(const SessionPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        SessionPrx(SessionPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~SessionPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        SessionPrx& operator=(const SessionPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        SessionPrx& operator=(SessionPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Keeps the session alive.
        /// @param context The request context.
        [[deprecated("As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.")]] void keepAlive(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Keeps the session alive.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[deprecated("As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.")]] [[nodiscard]] std::future<void> keepAliveAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Keeps the session alive.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        [[deprecated("As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.")]] std::function<void()> keepAliveAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_keepAlive(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;

        /// Allocates an object.
        /// @param id The identity of the object to allocate.
        /// @param context The request context.
        /// @return A proxy to the allocated object. This proxy is never null.
        /// @throws IceGrid::AllocationException Thrown when the allocation fails.
        /// @throws IceGrid::ObjectNotRegisteredException Thrown when an object with the given identity is not registered with
        /// the registry.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        std::optional<Ice::ObjectPrx> allocateObjectById(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Allocates an object.
        /// @param id The identity of the object to allocate.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        [[nodiscard]] std::future<std::optional<Ice::ObjectPrx>> allocateObjectByIdAsync(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Allocates an object.
        /// @param id The identity of the object to allocate.
        /// @param response The response callback. It accepts:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> allocateObjectByIdAsync(const ::Ice::Identity& id, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_allocateObjectById(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>&, const ::Ice::Identity&, const Ice::Context&) const;

        /// Allocates an object with the given type.
        /// @param type The type of the object.
        /// @param context The request context.
        /// @return A proxy to the allocated object. This proxy is never null.
        /// @throws IceGrid::AllocationException Thrown when the allocation fails.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        std::optional<Ice::ObjectPrx> allocateObjectByType(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Allocates an object with the given type.
        /// @param type The type of the object.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        [[nodiscard]] std::future<std::optional<Ice::ObjectPrx>> allocateObjectByTypeAsync(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Allocates an object with the given type.
        /// @param type The type of the object.
        /// @param response The response callback. It accepts:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> allocateObjectByTypeAsync(std::string_view type, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_allocateObjectByType(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>&, std::string_view, const Ice::Context&) const;

        /// Releases an object that was allocated using ::IceGrid::SessionPrx::allocateObjectById or ::IceGrid::SessionPrx::allocateObjectByType.
        /// @param id The identity of the object to release.
        /// @param context The request context.
        /// @throws IceGrid::AllocationException Thrown when the object can't be released. This can happen when the object is not
        /// allocatable or is not allocated by this session.
        /// @throws IceGrid::ObjectNotRegisteredException Thrown when an object with the given identity is not registered with
        /// the registry.
        void releaseObject(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Releases an object that was allocated using ::IceGrid::SessionPrx::allocateObjectById or ::IceGrid::SessionPrx::allocateObjectByType.
        /// @param id The identity of the object to release.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> releaseObjectAsync(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Releases an object that was allocated using ::IceGrid::SessionPrx::allocateObjectById or ::IceGrid::SessionPrx::allocateObjectByType.
        /// @param id The identity of the object to release.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> releaseObjectAsync(const ::Ice::Identity& id, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_releaseObject(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Identity&, const Ice::Context&) const;

        /// Sets the allocation timeout. When no object is immediately available for an allocation request, the
        /// implementation of ::IceGrid::SessionPrx::allocateObjectById and ::IceGrid::SessionPrx::allocateObjectByType waits for the duration of
        /// this timeout.
        /// @param timeout The timeout in milliseconds.
        /// @param context The request context.
        void setAllocationTimeout(std::int32_t timeout, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Sets the allocation timeout. When no object is immediately available for an allocation request, the
        /// implementation of ::IceGrid::SessionPrx::allocateObjectById and ::IceGrid::SessionPrx::allocateObjectByType waits for the duration of
        /// this timeout.
        /// @param timeout The timeout in milliseconds.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes.
        [[nodiscard]] std::future<void> setAllocationTimeoutAsync(std::int32_t timeout, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Sets the allocation timeout. When no object is immediately available for an allocation request, the
        /// implementation of ::IceGrid::SessionPrx::allocateObjectById and ::IceGrid::SessionPrx::allocateObjectByType waits for the duration of
        /// this timeout.
        /// @param timeout The timeout in milliseconds.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> setAllocationTimeoutAsync(std::int32_t timeout, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_setAllocationTimeout(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::int32_t, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Session"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static SessionPrx _fromReference(IceInternal::ReferencePtr ref) { return SessionPrx{std::move(ref)}; }

    protected:
        /// @private
        SessionPrx() = default;

        /// @private
        explicit SessionPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }

#if defined(__GNUC__) && !defined(__clang__)
#   pragma GCC diagnostic pop
#endif
    };
}

namespace IceGrid
{
    /// Represents a session object used by IceGrid clients to allocate and release objects. Client sessions are created
    /// either via the RegistryPrx object or via the registry client `SessionManager` object.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API Session : public virtual ::Glacier2::Session
    {
    public:
        /// The associated proxy type.
        using ProxyType = SessionPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Keeps the session alive.
        /// @param current The Current object of the incoming request.
        virtual void keepAlive(const Ice::Current& current) = 0;

        /// @private
        void _iceD_keepAlive(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Allocates an object.
        /// @param id The identity of the object to allocate.
        /// @param response The response callback. It accepts:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param current The Current object of the incoming request.
        /// @throws IceGrid::AllocationException Thrown when the allocation fails.
        /// @throws IceGrid::ObjectNotRegisteredException Thrown when an object with the given identity is not registered with
        /// the registry.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        virtual void allocateObjectByIdAsync(::Ice::Identity id, std::function<void(const std::optional<Ice::ObjectPrx>& returnValue)> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;

        /// @private
        void _iceD_allocateObjectById(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Allocates an object with the given type.
        /// @param type The type of the object.
        /// @param response The response callback. It accepts:
        /// - A proxy to the allocated object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param current The Current object of the incoming request.
        /// @throws IceGrid::AllocationException Thrown when the allocation fails.
        /// @see #setAllocationTimeout
        /// @see #releaseObject
        virtual void allocateObjectByTypeAsync(std::string type, std::function<void(const std::optional<Ice::ObjectPrx>& returnValue)> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;

        /// @private
        void _iceD_allocateObjectByType(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Releases an object that was allocated using ::IceGrid::SessionPrx::allocateObjectById or ::IceGrid::SessionPrx::allocateObjectByType.
        /// @param id The identity of the object to release.
        /// @param current The Current object of the incoming request.
        /// @throws IceGrid::AllocationException Thrown when the object can't be released. This can happen when the object is not
        /// allocatable or is not allocated by this session.
        /// @throws IceGrid::ObjectNotRegisteredException Thrown when an object with the given identity is not registered with
        /// the registry.
        virtual void releaseObject(::Ice::Identity id, const Ice::Current& current) = 0;

        /// @private
        void _iceD_releaseObject(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Sets the allocation timeout. When no object is immediately available for an allocation request, the
        /// implementation of ::IceGrid::SessionPrx::allocateObjectById and ::IceGrid::SessionPrx::allocateObjectByType waits for the duration of
        /// this timeout.
        /// @param timeout The timeout in milliseconds.
        /// @param current The Current object of the incoming request.
        virtual void setAllocationTimeout(std::int32_t timeout, const Ice::Current& current) = 0;

        /// @private
        void _iceD_setAllocationTimeout(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Session"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a Session.
    using SessionPtr = std::shared_ptr<Session>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
