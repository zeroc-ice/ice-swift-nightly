// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'FileParser.ice'.</auto-generated>
// clang-format off

#ifndef IceGrid_FileParser_h_
#define IceGrid_FileParser_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Admin.h"
#include <IceGrid/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceGrid
{
    class FileParserPrx;
}

namespace IceGrid
{
    /// `icegridadmin` provides a FileParserPrx object to transform XML files into ApplicationDescriptor
    /// objects.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API FileParserPrx : public Ice::Proxy<FileParserPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        FileParserPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        FileParserPrx(const FileParserPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        FileParserPrx(FileParserPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~FileParserPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        FileParserPrx& operator=(const FileParserPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        FileParserPrx& operator=(FileParserPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Parses a file.
        /// @param xmlFile The full path to the file.
        /// @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
        /// @param context The request context.
        /// @return The application descriptor.
        /// @throws IceGrid::ParseException Thrown when an error occurs during parsing.
        ApplicationDescriptor parse(std::string_view xmlFile, const std::optional<AdminPrx>& adminProxy, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Parses a file.
        /// @param xmlFile The full path to the file.
        /// @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - The application descriptor.
        [[nodiscard]] std::future<ApplicationDescriptor> parseAsync(std::string_view xmlFile, const std::optional<AdminPrx>& adminProxy, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Parses a file.
        /// @param xmlFile The full path to the file.
        /// @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
        /// @param response The response callback. It accepts:
        /// - The application descriptor.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> parseAsync(std::string_view xmlFile, const std::optional<AdminPrx>& adminProxy, std::function<void(::IceGrid::ApplicationDescriptor)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_parse(const std::shared_ptr<IceInternal::OutgoingAsyncT<ApplicationDescriptor>>&, std::string_view, const std::optional<AdminPrx>&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::FileParser"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static FileParserPrx _fromReference(IceInternal::ReferencePtr ref) { return FileParserPrx{std::move(ref)}; }

    protected:
        /// @private
        FileParserPrx() = default;

        /// @private
        explicit FileParserPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };
}

namespace IceGrid
{
    /// The exception that is thrown when an error occurs during the parsing of an IceGrid XML file.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API ParseException : public Ice::UserException
    {
    public:
        /// Default constructor.
        ParseException() noexcept = default;

        /// One-shot constructor to initialize all data members.
        /// @param reason The reason for the failure.
        ParseException(std::string reason) noexcept :
            reason(std::move(reason))
        {
        }

        /// Copy constructor.
        ParseException(const ParseException&) noexcept = default;

        /// Creates a tuple with all the fields of this exception.
        /// @return A tuple with all the fields of this exception.
        [[nodiscard]] std::tuple<const std::string&> ice_tuple() const
        {
            return std::tie(reason);
        }

        void ice_printFields(std::ostream& os) const override;
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::IceGrid::ParseException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

        /// The reason for the failure.
        std::string reason;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };
}

namespace IceGrid
{
    /// `icegridadmin` provides a FileParserPrx object to transform XML files into ApplicationDescriptor
    /// objects.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API FileParser : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = FileParserPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Parses a file.
        /// @param xmlFile The full path to the file.
        /// @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
        /// @param current The Current object of the incoming request.
        /// @return The application descriptor.
        /// @throws IceGrid::ParseException Thrown when an error occurs during parsing.
        virtual ApplicationDescriptor parse(std::string xmlFile, std::optional<AdminPrx> adminProxy, const Ice::Current& current) = 0;

        /// @private
        void _iceD_parse(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::FileParser"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a FileParser.
    using FileParserPtr = std::shared_ptr<FileParser>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
