// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Registry.ice'.</auto-generated>
// clang-format off

#ifndef IceGrid_Registry_h_
#define IceGrid_Registry_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Admin.h"
#include <Ice/Locator.h>
#include "Session.h"
#include <IceGrid/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

/// Deploy and manage Ice servers.
namespace IceGrid
{
    /// Determines which load sampling interval to use.
    enum class LoadSample : std::uint8_t
    {
        /// Sample every minute.
        LoadSample1,

        /// Sample every five minutes.
        LoadSample5,

        /// Sample every fifteen minutes.
        LoadSample15
    };

    /// Outputs the enumerator name or underlying value of a LoadSample to a stream.
    /// @param os The output stream.
    /// @param value The value to output.
    /// @return The output stream.
    ICEGRID_API std::ostream& operator<<(std::ostream& os, LoadSample value);

    class QueryPrx;

    class RegistryPrx;

    class LocatorPrx;
}

namespace IceGrid
{
    /// Finds well-known Ice objects registered with the IceGrid registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API QueryPrx : public Ice::Proxy<QueryPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        QueryPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        QueryPrx(const QueryPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        QueryPrx(QueryPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~QueryPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        QueryPrx& operator=(const QueryPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        QueryPrx& operator=(QueryPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Finds a well-known object by identity.
        /// @param id The identity.
        /// @param context The request context.
        /// @return A proxy to the well-known object, or null if no such object is registered.
        std::optional<Ice::ObjectPrx> findObjectById(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Finds a well-known object by identity.
        /// @param id The identity.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the well-known object, or null if no such object is registered.
        [[nodiscard]] std::future<std::optional<Ice::ObjectPrx>> findObjectByIdAsync(const ::Ice::Identity& id, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Finds a well-known object by identity.
        /// @param id The identity.
        /// @param response The response callback. It accepts:
        /// - A proxy to the well-known object, or null if no such object is registered.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> findObjectByIdAsync(const ::Ice::Identity& id, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_findObjectById(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>&, const ::Ice::Identity&, const Ice::Context&) const;

        /// Finds a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// @param type The object type.
        /// @param context The request context.
        /// @return A proxy to a well-known object with the specified type, or null if no such object is registered.
        std::optional<Ice::ObjectPrx> findObjectByType(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Finds a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// @param type The object type.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to a well-known object with the specified type, or null if no such object is registered.
        [[nodiscard]] std::future<std::optional<Ice::ObjectPrx>> findObjectByTypeAsync(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Finds a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// @param type The object type.
        /// @param response The response callback. It accepts:
        /// - A proxy to a well-known object with the specified type, or null if no such object is registered.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> findObjectByTypeAsync(std::string_view type, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_findObjectByType(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>&, std::string_view, const Ice::Context&) const;

        /// Finds a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// @param type The object type.
        /// @param sample The sampling interval.
        /// @param context The request context.
        /// @return A proxy to the well-known object, or null if no such object is registered.
        std::optional<Ice::ObjectPrx> findObjectByTypeOnLeastLoadedNode(std::string_view type, LoadSample sample, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Finds a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// @param type The object type.
        /// @param sample The sampling interval.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the well-known object, or null if no such object is registered.
        [[nodiscard]] std::future<std::optional<Ice::ObjectPrx>> findObjectByTypeOnLeastLoadedNodeAsync(std::string_view type, LoadSample sample, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Finds a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// @param type The object type.
        /// @param sample The sampling interval.
        /// @param response The response callback. It accepts:
        /// - A proxy to the well-known object, or null if no such object is registered.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> findObjectByTypeOnLeastLoadedNodeAsync(std::string_view type, LoadSample sample, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_findObjectByTypeOnLeastLoadedNode(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>&, std::string_view, LoadSample, const Ice::Context&) const;

        /// Finds all the well-known objects with the given type.
        /// @param type The object type.
        /// @param context The request context.
        /// @return A list of proxies to the well-known objects with the specified type. Can be empty.
        ::Ice::ObjectProxySeq findAllObjectsByType(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Finds all the well-known objects with the given type.
        /// @param type The object type.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A list of proxies to the well-known objects with the specified type. Can be empty.
        [[nodiscard]] std::future<::Ice::ObjectProxySeq> findAllObjectsByTypeAsync(std::string_view type, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Finds all the well-known objects with the given type.
        /// @param type The object type.
        /// @param response The response callback. It accepts:
        /// - A list of proxies to the well-known objects with the specified type. Can be empty.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> findAllObjectsByTypeAsync(std::string_view type, std::function<void(::Ice::ObjectProxySeq)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_findAllObjectsByType(const std::shared_ptr<IceInternal::OutgoingAsyncT<::Ice::ObjectProxySeq>>&, std::string_view, const Ice::Context&) const;

        /// Finds all the replicas of a well-known object.
        /// @param proxy A proxy that identifies the well-known object.
        /// @param context The request context.
        /// @return A list of proxies  to the replicas of the well-known object specified by @p proxy. Can be empty.
        ::Ice::ObjectProxySeq findAllReplicas(const std::optional<Ice::ObjectPrx>& proxy, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Finds all the replicas of a well-known object.
        /// @param proxy A proxy that identifies the well-known object.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A list of proxies  to the replicas of the well-known object specified by @p proxy. Can be empty.
        [[nodiscard]] std::future<::Ice::ObjectProxySeq> findAllReplicasAsync(const std::optional<Ice::ObjectPrx>& proxy, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Finds all the replicas of a well-known object.
        /// @param proxy A proxy that identifies the well-known object.
        /// @param response The response callback. It accepts:
        /// - A list of proxies  to the replicas of the well-known object specified by @p proxy. Can be empty.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> findAllReplicasAsync(const std::optional<Ice::ObjectPrx>& proxy, std::function<void(::Ice::ObjectProxySeq)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_findAllReplicas(const std::shared_ptr<IceInternal::OutgoingAsyncT<::Ice::ObjectProxySeq>>&, const std::optional<Ice::ObjectPrx>&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Query"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static QueryPrx _fromReference(IceInternal::ReferencePtr ref) { return QueryPrx{std::move(ref)}; }

    protected:
        /// @private
        QueryPrx() = default;

        /// @private
        explicit QueryPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };

    /// Represents the main entry point into the IceGrid registry service. It provides operations to create sessions
    /// with the registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API RegistryPrx : public Ice::Proxy<RegistryPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        RegistryPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        RegistryPrx(const RegistryPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        RegistryPrx(RegistryPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~RegistryPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        RegistryPrx& operator=(const RegistryPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        RegistryPrx& operator=(RegistryPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Creates a client session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param context The request context.
        /// @return A proxy to the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        std::optional<SessionPrx> createSession(std::string_view userId, std::string_view password, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Creates a client session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the newly created session. This proxy is never null.
        [[nodiscard]] std::future<std::optional<SessionPrx>> createSessionAsync(std::string_view userId, std::string_view password, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Creates a client session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param response The response callback. It accepts:
        /// - A proxy to the newly created session. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> createSessionAsync(std::string_view userId, std::string_view password, std::function<void(std::optional<::IceGrid::SessionPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_createSession(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<SessionPrx>>>&, std::string_view, std::string_view, const Ice::Context&) const;

        /// Creates an administrative session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param context The request context.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        std::optional<AdminSessionPrx> createAdminSession(std::string_view userId, std::string_view password, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Creates an administrative session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy for the newly created session. This proxy is never null.
        [[nodiscard]] std::future<std::optional<AdminSessionPrx>> createAdminSessionAsync(std::string_view userId, std::string_view password, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Creates an administrative session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param response The response callback. It accepts:
        /// - A proxy for the newly created session. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> createAdminSessionAsync(std::string_view userId, std::string_view password, std::function<void(std::optional<::IceGrid::AdminSessionPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_createAdminSession(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<AdminSessionPrx>>>&, std::string_view, std::string_view, const Ice::Context&) const;

        /// Creates a client session from a secure connection.
        /// @param context The request context.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        std::optional<SessionPrx> createSessionFromSecureConnection(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Creates a client session from a secure connection.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy for the newly created session. This proxy is never null.
        [[nodiscard]] std::future<std::optional<SessionPrx>> createSessionFromSecureConnectionAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Creates a client session from a secure connection.
        /// @param response The response callback. It accepts:
        /// - A proxy for the newly created session. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> createSessionFromSecureConnectionAsync(std::function<void(std::optional<::IceGrid::SessionPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_createSessionFromSecureConnection(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<SessionPrx>>>&, const Ice::Context&) const;

        /// Creates an administrative session from a secure connection.
        /// @param context The request context.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        std::optional<AdminSessionPrx> createAdminSessionFromSecureConnection(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Creates an administrative session from a secure connection.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy for the newly created session. This proxy is never null.
        [[nodiscard]] std::future<std::optional<AdminSessionPrx>> createAdminSessionFromSecureConnectionAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Creates an administrative session from a secure connection.
        /// @param response The response callback. It accepts:
        /// - A proxy for the newly created session. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> createAdminSessionFromSecureConnectionAsync(std::function<void(std::optional<::IceGrid::AdminSessionPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_createAdminSessionFromSecureConnection(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<AdminSessionPrx>>>&, const Ice::Context&) const;

        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call ::IceGrid::SessionPrx::keepAlive (resp. ::IceGrid::AdminSessionPrx::keepAlive) to keep
        /// a session alive in the IceGrid registry.
        /// @param context The request context.
        /// @return The session timeout (in seconds).
        [[deprecated]] std::int32_t getSessionTimeout(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call ::IceGrid::SessionPrx::keepAlive (resp. ::IceGrid::AdminSessionPrx::keepAlive) to keep
        /// a session alive in the IceGrid registry.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - The session timeout (in seconds).
        [[deprecated]] [[nodiscard]] std::future<std::int32_t> getSessionTimeoutAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call ::IceGrid::SessionPrx::keepAlive (resp. ::IceGrid::AdminSessionPrx::keepAlive) to keep
        /// a session alive in the IceGrid registry.
        /// @param response The response callback. It accepts:
        /// - The session timeout (in seconds).
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        [[deprecated]] std::function<void()> getSessionTimeoutAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_getSessionTimeout(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Registry"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static RegistryPrx _fromReference(IceInternal::ReferencePtr ref) { return RegistryPrx{std::move(ref)}; }

    protected:
        /// @private
        RegistryPrx() = default;

        /// @private
        explicit RegistryPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };

    /// Provides access to the QueryPrx and RegistryPrx objects implemented by the IceGrid registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API LocatorPrx : public Ice::Proxy<LocatorPrx, ::Ice::LocatorPrx>
    {
    public:
#if defined(__GNUC__) && !defined(__clang__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        LocatorPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        LocatorPrx(const LocatorPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        LocatorPrx(LocatorPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~LocatorPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        LocatorPrx& operator=(const LocatorPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        LocatorPrx& operator=(LocatorPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Gets a proxy to the registry object hosted by this IceGrid registry.
        /// @param context The request context.
        /// @return A proxy to the registry object. This proxy is never null.
        std::optional<RegistryPrx> getLocalRegistry(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Gets a proxy to the registry object hosted by this IceGrid registry.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the registry object. This proxy is never null.
        [[nodiscard]] std::future<std::optional<RegistryPrx>> getLocalRegistryAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Gets a proxy to the registry object hosted by this IceGrid registry.
        /// @param response The response callback. It accepts:
        /// - A proxy to the registry object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> getLocalRegistryAsync(std::function<void(std::optional<::IceGrid::RegistryPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_getLocalRegistry(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<RegistryPrx>>>&, const Ice::Context&) const;

        /// Gets a proxy to the query object hosted by this IceGrid registry.
        /// @param context The request context.
        /// @return A proxy to the query object. This proxy is never null.
        std::optional<QueryPrx> getLocalQuery(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Gets a proxy to the query object hosted by this IceGrid registry.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - A proxy to the query object. This proxy is never null.
        [[nodiscard]] std::future<std::optional<QueryPrx>> getLocalQueryAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Gets a proxy to the query object hosted by this IceGrid registry.
        /// @param response The response callback. It accepts:
        /// - A proxy to the query object. This proxy is never null.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> getLocalQueryAsync(std::function<void(std::optional<::IceGrid::QueryPrx>)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_getLocalQuery(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<QueryPrx>>>&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Locator"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static LocatorPrx _fromReference(IceInternal::ReferencePtr ref) { return LocatorPrx{std::move(ref)}; }

    protected:
        /// @private
        LocatorPrx() = default;

        /// @private
        explicit LocatorPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }

#if defined(__GNUC__) && !defined(__clang__)
#   pragma GCC diagnostic pop
#endif
    };
}

namespace IceGrid
{
    /// Finds well-known Ice objects registered with the IceGrid registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API Query : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = QueryPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Finds a well-known object by identity.
        /// @param id The identity.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to the well-known object, or null if no such object is registered.
        [[nodiscard]] virtual std::optional<Ice::ObjectPrx> findObjectById(::Ice::Identity id, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_findObjectById(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Finds a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// @param type The object type.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to a well-known object with the specified type, or null if no such object is registered.
        [[nodiscard]] virtual std::optional<Ice::ObjectPrx> findObjectByType(std::string type, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_findObjectByType(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Finds a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// @param type The object type.
        /// @param sample The sampling interval.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to the well-known object, or null if no such object is registered.
        [[nodiscard]] virtual std::optional<Ice::ObjectPrx> findObjectByTypeOnLeastLoadedNode(std::string type, LoadSample sample, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_findObjectByTypeOnLeastLoadedNode(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Finds all the well-known objects with the given type.
        /// @param type The object type.
        /// @param current The Current object of the incoming request.
        /// @return A list of proxies to the well-known objects with the specified type. Can be empty.
        [[nodiscard]] virtual ::Ice::ObjectProxySeq findAllObjectsByType(std::string type, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_findAllObjectsByType(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Finds all the replicas of a well-known object.
        /// @param proxy A proxy that identifies the well-known object.
        /// @param current The Current object of the incoming request.
        /// @return A list of proxies  to the replicas of the well-known object specified by @p proxy. Can be empty.
        [[nodiscard]] virtual ::Ice::ObjectProxySeq findAllReplicas(std::optional<Ice::ObjectPrx> proxy, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_findAllReplicas(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Query"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a Query.
    using QueryPtr = std::shared_ptr<Query>;

    /// Represents the main entry point into the IceGrid registry service. It provides operations to create sessions
    /// with the registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API Registry : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = RegistryPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Creates a client session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        virtual std::optional<SessionPrx> createSession(std::string userId, std::string password, const Ice::Current& current) = 0;

        /// @private
        void _iceD_createSession(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Creates an administrative session.
        /// @param userId The user ID.
        /// @param password The password for the given user.
        /// @param current The Current object of the incoming request.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        virtual std::optional<AdminSessionPrx> createAdminSession(std::string userId, std::string password, const Ice::Current& current) = 0;

        /// @private
        void _iceD_createAdminSession(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Creates a client session from a secure connection.
        /// @param current The Current object of the incoming request.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        virtual std::optional<SessionPrx> createSessionFromSecureConnection(const Ice::Current& current) = 0;

        /// @private
        void _iceD_createSessionFromSecureConnection(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Creates an administrative session from a secure connection.
        /// @param current The Current object of the incoming request.
        /// @return A proxy for the newly created session. This proxy is never null.
        /// @throws IceGrid::PermissionDeniedException Thrown when authentication or authorization fails.
        virtual std::optional<AdminSessionPrx> createAdminSessionFromSecureConnection(const Ice::Current& current) = 0;

        /// @private
        void _iceD_createAdminSessionFromSecureConnection(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);

        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call ::IceGrid::SessionPrx::keepAlive (resp. ::IceGrid::AdminSessionPrx::keepAlive) to keep
        /// a session alive in the IceGrid registry.
        /// @param current The Current object of the incoming request.
        /// @return The session timeout (in seconds).
        [[nodiscard]] virtual std::int32_t getSessionTimeout(const Ice::Current& current) const = 0;

        /// @private
        void _iceD_getSessionTimeout(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Registry"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a Registry.
    using RegistryPtr = std::shared_ptr<Registry>;

    /// Provides access to the QueryPrx and RegistryPrx objects implemented by the IceGrid registry.
    /// @headerfile IceGrid/IceGrid.h
    class ICEGRID_API Locator : public virtual ::Ice::Locator
    {
    public:
        /// The associated proxy type.
        using ProxyType = LocatorPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Gets a proxy to the registry object hosted by this IceGrid registry.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to the registry object. This proxy is never null.
        [[nodiscard]] virtual std::optional<RegistryPrx> getLocalRegistry(const Ice::Current& current) const = 0;

        /// @private
        void _iceD_getLocalRegistry(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets a proxy to the query object hosted by this IceGrid registry.
        /// @param current The Current object of the incoming request.
        /// @return A proxy to the query object. This proxy is never null.
        [[nodiscard]] virtual std::optional<QueryPrx> getLocalQuery(const Ice::Current& current) const = 0;

        /// @private
        void _iceD_getLocalQuery(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::IceGrid::Locator"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a Locator.
    using LocatorPtr = std::shared_ptr<Locator>;
}

namespace Ice
{
    /// @cond INTERNAL
    template<>
    struct StreamableTraits<::IceGrid::LoadSample>
    {
        static constexpr StreamHelperCategory helper = StreamHelperCategoryEnum;
        static constexpr int minValue = 0;
        static constexpr int maxValue = 2;
        static constexpr int minWireSize = 1;
        static constexpr bool fixedLength = false;
    };
    /// @endcond
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
