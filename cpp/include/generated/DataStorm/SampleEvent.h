// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'SampleEvent.ice'.</auto-generated>
// clang-format off

#ifndef DataStorm_SampleEvent_h_
#define DataStorm_SampleEvent_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef DATASTORM_API
#   if defined(DATASTORM_API_EXPORTS)
#       define DATASTORM_API ICE_DECLSPEC_EXPORT
#   else
#       define DATASTORM_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

/// Data-centric, broker-less publish/subscribe framework. C++ only.
namespace DataStorm
{
    /// Describes the operation used by a data writer to update a data element.
    enum class SampleEvent : std::uint8_t
    {
        /// The data writer added the element.
        Add,

        /// The data writer updated the element.
        Update,

        /// The data writer partially updated the element.
        PartialUpdate,

        /// The data writer removed the element.
        Remove
    };

    /// Outputs the enumerator name or underlying value of a SampleEvent to a stream.
    /// @param os The output stream.
    /// @param value The value to output.
    /// @return The output stream.
    DATASTORM_API std::ostream& operator<<(std::ostream& os, SampleEvent value);

    /// A sequence of sample events.
    using SampleEventSeq = std::vector<SampleEvent>;
}

namespace Ice
{
    /// @cond INTERNAL
    template<>
    struct StreamableTraits<::DataStorm::SampleEvent>
    {
        static constexpr StreamHelperCategory helper = StreamHelperCategoryEnum;
        static constexpr int minValue = 0;
        static constexpr int maxValue = 3;
        static constexpr int minWireSize = 1;
        static constexpr bool fixedLength = false;
    };
    /// @endcond
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
