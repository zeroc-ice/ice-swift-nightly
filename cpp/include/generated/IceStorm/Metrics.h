// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Metrics.ice'.</auto-generated>
// clang-format off

#ifndef IceStorm_Metrics_h_
#define IceStorm_Metrics_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Metrics.h>
#include <IceStorm/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICESTORM_API
#   if defined(ICESTORM_API_EXPORTS)
#       define ICESTORM_API ICE_DECLSPEC_EXPORT
#   else
#       define ICESTORM_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceMX
{
    class TopicMetrics;

    /// A shared pointer to a TopicMetrics.
    using TopicMetricsPtr = std::shared_ptr<TopicMetrics>;

    class SubscriberMetrics;

    /// A shared pointer to a SubscriberMetrics.
    using SubscriberMetricsPtr = std::shared_ptr<SubscriberMetrics>;
}

namespace IceMX
{
    /// Provides information about one or more IceStorm topics.
    /// @headerfile IceStorm/IceStorm.h
    class ICESTORM_API TopicMetrics : public Metrics
    {
    public:
        /// Default constructor.
        TopicMetrics() noexcept = default;

        /// One-shot constructor to initialize all data members.
        /// @param id The metrics identifier.
        /// @param total The total number of objects observed by this metrics.
        /// @param current The number of objects currently observed by this metrics.
        /// @param totalLifetime The sum of the lifetime of each observed objects.
        /// @param failures The number of failures observed.
        /// @param published The number of events published on the topic(s) by publishers.
        /// @param forwarded The number of events forwarded on the topic(s) by IceStorm topic links.
        TopicMetrics(std::string id, std::int64_t total, std::int32_t current, std::int64_t totalLifetime, std::int32_t failures, std::int64_t published, std::int64_t forwarded) noexcept :
            Metrics(std::move(id), total, current, totalLifetime, failures),
            published(published),
            forwarded(forwarded)
        {
        }

        /// Gets the type ID of the associated Slice class.
        /// @return The string `"::IceMX::TopicMetrics"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        /// Creates a tuple with all the fields of this class.
        /// @return A tuple with all the fields of this class.
        [[nodiscard]] std::tuple<const std::string&, const std::int64_t&, const std::int32_t&, const std::int64_t&, const std::int32_t&, const std::int64_t&, const std::int64_t&> ice_tuple() const
        {
            return std::tie(id, total, current, totalLifetime, failures, published, forwarded);
        }

        /// Creates a shallow polymorphic copy of this instance.
        /// @return The cloned value.
        [[nodiscard]] TopicMetricsPtr ice_clone() const { return std::static_pointer_cast<TopicMetrics>(_iceCloneImpl()); }

        void ice_printFields(std::ostream& os) const override;

        /// The number of events published on the topic(s) by publishers.
        std::int64_t published{INT64_C(0)};

        /// The number of events forwarded on the topic(s) by IceStorm topic links.
        std::int64_t forwarded{INT64_C(0)};

    protected:
        /// Copy constructor.
        TopicMetrics(const TopicMetrics&) = default;

        /// @private
        [[nodiscard]] Ice::ValuePtr _iceCloneImpl() const override;

        /// @private
        void _iceWriteImpl(Ice::OutputStream*) const override;

        /// @private
        void _iceReadImpl(Ice::InputStream*) override;
    };

    /// Provides information about IceStorm subscribers.
    /// @headerfile IceStorm/IceStorm.h
    class ICESTORM_API SubscriberMetrics : public Metrics
    {
    public:
        /// Default constructor.
        SubscriberMetrics() noexcept = default;

        /// One-shot constructor to initialize all data members.
        /// @param id The metrics identifier.
        /// @param total The total number of objects observed by this metrics.
        /// @param current The number of objects currently observed by this metrics.
        /// @param totalLifetime The sum of the lifetime of each observed objects.
        /// @param failures The number of failures observed.
        /// @param queued The number of queued events.
        /// @param outstanding The number of outstanding events.
        /// @param delivered The number of forwarded events.
        SubscriberMetrics(std::string id, std::int64_t total, std::int32_t current, std::int64_t totalLifetime, std::int32_t failures, std::int32_t queued, std::int32_t outstanding, std::int64_t delivered) noexcept :
            Metrics(std::move(id), total, current, totalLifetime, failures),
            queued(queued),
            outstanding(outstanding),
            delivered(delivered)
        {
        }

        /// Gets the type ID of the associated Slice class.
        /// @return The string `"::IceMX::SubscriberMetrics"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        /// Creates a tuple with all the fields of this class.
        /// @return A tuple with all the fields of this class.
        [[nodiscard]] std::tuple<const std::string&, const std::int64_t&, const std::int32_t&, const std::int64_t&, const std::int32_t&, const std::int32_t&, const std::int32_t&, const std::int64_t&> ice_tuple() const
        {
            return std::tie(id, total, current, totalLifetime, failures, queued, outstanding, delivered);
        }

        /// Creates a shallow polymorphic copy of this instance.
        /// @return The cloned value.
        [[nodiscard]] SubscriberMetricsPtr ice_clone() const { return std::static_pointer_cast<SubscriberMetrics>(_iceCloneImpl()); }

        void ice_printFields(std::ostream& os) const override;

        /// The number of queued events.
        std::int32_t queued{0};

        /// The number of outstanding events.
        std::int32_t outstanding{0};

        /// The number of forwarded events.
        std::int64_t delivered{INT64_C(0)};

    protected:
        /// Copy constructor.
        SubscriberMetrics(const SubscriberMetrics&) = default;

        /// @private
        [[nodiscard]] Ice::ValuePtr _iceCloneImpl() const override;

        /// @private
        void _iceWriteImpl(Ice::OutputStream*) const override;

        /// @private
        void _iceReadImpl(Ice::InputStream*) override;
    };
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
