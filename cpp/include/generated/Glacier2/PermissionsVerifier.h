// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'PermissionsVerifier.ice'.</auto-generated>
// clang-format off

#ifndef Glacier2_PermissionsVerifier_h_
#define Glacier2_PermissionsVerifier_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "SSLInfo.h"
#include <Glacier2/Config.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef GLACIER2_API
#   if defined(GLACIER2_API_EXPORTS)
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace Glacier2
{
    class PermissionsVerifierPrx;

    class SSLPermissionsVerifierPrx;
}

namespace Glacier2
{
    /// Represents an object that checks user permissions. The Glacier2 router and other services use a
    /// PermissionsVerifierPrx proxy when the user is authenticated using a user ID and password.
    /// @headerfile Glacier2/Glacier2.h
    class GLACIER2_API PermissionsVerifierPrx : public Ice::Proxy<PermissionsVerifierPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        PermissionsVerifierPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        PermissionsVerifierPrx(const PermissionsVerifierPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        PermissionsVerifierPrx(PermissionsVerifierPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~PermissionsVerifierPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        PermissionsVerifierPrx& operator=(const PermissionsVerifierPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        PermissionsVerifierPrx& operator=(PermissionsVerifierPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Checks if a user is authorized to establish a session.
        /// @param userId The user ID.
        /// @param password The user's password.
        /// @param[out] reason The reason why access was denied.
        /// @param context The request context.
        /// @return `true` if access is granted, `false` otherwise.
        /// @throws Glacier2::PermissionDeniedException Thrown when the user access is denied. This exception can be thrown
        /// instead of returning `false` with a reason set in the reason out parameter.
        bool checkPermissions(std::string_view userId, std::string_view password, std::string& reason, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Checks if a user is authorized to establish a session.
        /// @param userId The user ID.
        /// @param password The user's password.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - `returnValue` `true` if access is granted, `false` otherwise.
        /// - `reason` The reason why access was denied.
        [[nodiscard]] std::future<std::tuple<bool, std::string>> checkPermissionsAsync(std::string_view userId, std::string_view password, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Checks if a user is authorized to establish a session.
        /// @param userId The user ID.
        /// @param password The user's password.
        /// @param response The response callback. It accepts:
        /// - `returnValue` `true` if access is granted, `false` otherwise.
        /// - `reason` The reason why access was denied.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> checkPermissionsAsync(std::string_view userId, std::string_view password, std::function<void(bool, std::string)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_checkPermissions(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<bool, std::string>>>&, std::string_view, std::string_view, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::Glacier2::PermissionsVerifier"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static PermissionsVerifierPrx _fromReference(IceInternal::ReferencePtr ref) { return PermissionsVerifierPrx{std::move(ref)}; }

    protected:
        /// @private
        PermissionsVerifierPrx() = default;

        /// @private
        explicit PermissionsVerifierPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };

    /// Represents an object that checks user permissions. The Glacier2 router and other services use an
    /// SSLPermissionsVerifierPrx proxy when the user is authenticated through an SSL certificate.
    /// @headerfile Glacier2/Glacier2.h
    class GLACIER2_API SSLPermissionsVerifierPrx : public Ice::Proxy<SSLPermissionsVerifierPrx, Ice::ObjectPrx>
    {
    public:
        /// Constructs a proxy from a Communicator and a proxy string.
        /// @param communicator The communicator of the new proxy.
        /// @param proxyString The proxy string to parse.
        SSLPermissionsVerifierPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx{communicator, proxyString} {} // NOLINT(modernize-use-equals-default)

        /// Copy constructor. Constructs with a copy of the contents of @p other.
        /// @param other The proxy to copy from.
        SSLPermissionsVerifierPrx(const SSLPermissionsVerifierPrx& other) noexcept : Ice::ObjectPrx{other} {} // NOLINT(modernize-use-equals-default)

        /// Move constructor. Constructs a proxy with the contents of @p other using move semantics.
        /// @param other The proxy to move from.
        SSLPermissionsVerifierPrx(SSLPermissionsVerifierPrx&& other) noexcept : Ice::ObjectPrx{std::move(other)} {} // NOLINT(modernize-use-equals-default)

        ~SSLPermissionsVerifierPrx() override;

        /// Copy assignment operator. Replaces the contents of this proxy with a copy of the contents of @p rhs.
        /// @param rhs The proxy to copy from.
        /// @return A reference to this proxy.
        SSLPermissionsVerifierPrx& operator=(const SSLPermissionsVerifierPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        /// Move assignment operator. Replaces the contents of this proxy with the contents of @p rhs using move semantics.
        /// @param rhs The proxy to move from.
        SSLPermissionsVerifierPrx& operator=(SSLPermissionsVerifierPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// Checks if a user is authorized to establish a session.
        /// @param info The SSL information.
        /// @param[out] reason The reason why access was denied.
        /// @param context The request context.
        /// @return `true` if access is granted, `false` otherwise.
        /// @throws Glacier2::PermissionDeniedException Thrown when the user access is denied. This exception can be thrown
        /// instead of returning `false` with a reason set in the reason out parameter.
        bool authorize(const SSLInfo& info, std::string& reason, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Checks if a user is authorized to establish a session.
        /// @param info The SSL information.
        /// @param context The request context.
        /// @return A future that becomes available when the invocation completes. This future holds:
        /// - `returnValue` `true` if access is granted, `false` otherwise.
        /// - `reason` The reason why access was denied.
        [[nodiscard]] std::future<std::tuple<bool, std::string>> authorizeAsync(const SSLInfo& info, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Checks if a user is authorized to establish a session.
        /// @param info The SSL information.
        /// @param response The response callback. It accepts:
        /// - `returnValue` `true` if access is granted, `false` otherwise.
        /// - `reason` The reason why access was denied.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The request context.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> authorizeAsync(const SSLInfo& info, std::function<void(bool, std::string)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// @private
        void _iceI_authorize(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<bool, std::string>>>&, const SSLInfo&, const Ice::Context&) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::Glacier2::SSLPermissionsVerifier"`.
        static const char* ice_staticId() noexcept;

        /// @private
        static SSLPermissionsVerifierPrx _fromReference(IceInternal::ReferencePtr ref) { return SSLPermissionsVerifierPrx{std::move(ref)}; }

    protected:
        /// @private
        SSLPermissionsVerifierPrx() = default;

        /// @private
        explicit SSLPermissionsVerifierPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx{std::move(ref)}
        {
        }
    };
}

namespace Glacier2
{
    /// The exception that is thrown when a client is not allowed to create a session.
    /// @headerfile Glacier2/Glacier2.h
    class GLACIER2_API PermissionDeniedException : public Ice::UserException
    {
    public:
        /// Default constructor.
        PermissionDeniedException() noexcept = default;

        /// One-shot constructor to initialize all data members.
        /// @param reason The reason why permission was denied.
        PermissionDeniedException(std::string reason) noexcept :
            reason(std::move(reason))
        {
        }

        /// Copy constructor.
        PermissionDeniedException(const PermissionDeniedException&) noexcept = default;

        /// Creates a tuple with all the fields of this exception.
        /// @return A tuple with all the fields of this exception.
        [[nodiscard]] std::tuple<const std::string&> ice_tuple() const
        {
            return std::tie(reason);
        }

        void ice_printFields(std::ostream& os) const override;
        /// Gets the type ID of the associated Slice exception.
        /// @return The string `"::Glacier2::PermissionDeniedException"`.
        static const char* ice_staticId() noexcept;

        [[nodiscard]] const char* ice_id() const noexcept override;

        void ice_throw() const override;

        /// The reason why permission was denied.
        std::string reason;

    protected:
        /// @private
        void _writeImpl(Ice::OutputStream*) const override;

        /// @private
        void _readImpl(Ice::InputStream*) override;
    };
}

namespace Glacier2
{
    /// Represents an object that checks user permissions. The Glacier2 router and other services use a
    /// PermissionsVerifierPrx proxy when the user is authenticated using a user ID and password.
    /// @headerfile Glacier2/Glacier2.h
    class GLACIER2_API PermissionsVerifier : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = PermissionsVerifierPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Checks if a user is authorized to establish a session.
        /// @param userId The user ID.
        /// @param password The user's password.
        /// @param[out] reason The reason why access was denied.
        /// @param current The Current object of the incoming request.
        /// @return `true` if access is granted, `false` otherwise.
        /// @throws Glacier2::PermissionDeniedException Thrown when the user access is denied. This exception can be thrown
        /// instead of returning `false` with a reason set in the reason out parameter.
        virtual bool checkPermissions(std::string userId, std::string password, std::string& reason, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_checkPermissions(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::Glacier2::PermissionsVerifier"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a PermissionsVerifier.
    using PermissionsVerifierPtr = std::shared_ptr<PermissionsVerifier>;

    /// Represents an object that checks user permissions. The Glacier2 router and other services use an
    /// SSLPermissionsVerifierPrx proxy when the user is authenticated through an SSL certificate.
    /// @headerfile Glacier2/Glacier2.h
    class GLACIER2_API SSLPermissionsVerifier : public virtual Ice::Object
    {
    public:
        /// The associated proxy type.
        using ProxyType = SSLPermissionsVerifierPrx;

        /// Dispatches an incoming request to one of the member functions of this generated class, based on the operation name carried by the request.
        /// @param request The incoming request.
        /// @param sendResponse The callback to send the response.
        void dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse) override;

        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Checks if a user is authorized to establish a session.
        /// @param info The SSL information.
        /// @param[out] reason The reason why access was denied.
        /// @param current The Current object of the incoming request.
        /// @return `true` if access is granted, `false` otherwise.
        /// @throws Glacier2::PermissionDeniedException Thrown when the user access is denied. This exception can be thrown
        /// instead of returning `false` with a reason set in the reason out parameter.
        virtual bool authorize(SSLInfo info, std::string& reason, const Ice::Current& current) const = 0;

        /// @private
        void _iceD_authorize(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) const;

        /// Gets the type ID of the associated Slice interface.
        /// @return The string `"::Glacier2::SSLPermissionsVerifier"`.
        static const char* ice_staticId() noexcept;
    };

    /// A shared pointer to a SSLPermissionsVerifier.
    using SSLPermissionsVerifierPtr = std::shared_ptr<SSLPermissionsVerifier>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
