// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Router.ice'.</auto-generated>

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "Glacier2/Router.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::Glacier2::SessionNotExistException> iceC_Glacier2_SessionNotExistException_init;
}

Glacier2::RouterPrx::~RouterPrx() = default;

std::string
Glacier2::RouterPrx::getCategoryForClient(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(true, this, &RouterPrx::_iceI_getCategoryForClient, context).get();
}

std::future<std::string>
Glacier2::RouterPrx::getCategoryForClientAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(false, this, &RouterPrx::_iceI_getCategoryForClient, context);
}

std::function<void()>
Glacier2::RouterPrx::getCategoryForClientAsync(std::function<void(std::string)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::string>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_getCategoryForClient, context);
}

void
Glacier2::RouterPrx::_iceI_getCategoryForClient(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::string>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getCategoryForClient";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

std::optional<::Glacier2::SessionPrx>
Glacier2::RouterPrx::createSession(std::string_view iceP_userId, std::string_view iceP_password, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SessionPrx>>(true, this, &RouterPrx::_iceI_createSession, iceP_userId, iceP_password, context).get();
}

std::future<std::optional<::Glacier2::SessionPrx>>
Glacier2::RouterPrx::createSessionAsync(std::string_view iceP_userId, std::string_view iceP_password, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SessionPrx>>(false, this, &RouterPrx::_iceI_createSession, iceP_userId, iceP_password, context);
}

std::function<void()>
Glacier2::RouterPrx::createSessionAsync(std::string_view iceP_userId, std::string_view iceP_password, std::function<void(std::optional<::Glacier2::SessionPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<SessionPrx>>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_createSession, iceP_userId, iceP_password, context);
}

void
Glacier2::RouterPrx::_iceI_createSession(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<SessionPrx>>>& outAsync, std::string_view iceP_userId, std::string_view iceP_password, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "createSession";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId, iceP_password);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const PermissionDeniedException&)
            {
                throw;
            }
            catch (const CannotCreateSessionException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

std::optional<::Glacier2::SessionPrx>
Glacier2::RouterPrx::createSessionFromSecureConnection(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SessionPrx>>(true, this, &RouterPrx::_iceI_createSessionFromSecureConnection, context).get();
}

std::future<std::optional<::Glacier2::SessionPrx>>
Glacier2::RouterPrx::createSessionFromSecureConnectionAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SessionPrx>>(false, this, &RouterPrx::_iceI_createSessionFromSecureConnection, context);
}

std::function<void()>
Glacier2::RouterPrx::createSessionFromSecureConnectionAsync(std::function<void(std::optional<::Glacier2::SessionPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<SessionPrx>>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_createSessionFromSecureConnection, context);
}

void
Glacier2::RouterPrx::_iceI_createSessionFromSecureConnection(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<SessionPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "createSessionFromSecureConnection";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const PermissionDeniedException&)
            {
                throw;
            }
            catch (const CannotCreateSessionException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
Glacier2::RouterPrx::refreshSession(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &RouterPrx::_iceI_refreshSession, context).get();
}

std::future<void>
Glacier2::RouterPrx::refreshSessionAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &RouterPrx::_iceI_refreshSession, context);
}

std::function<void()>
Glacier2::RouterPrx::refreshSessionAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_refreshSession, context);
}

void
Glacier2::RouterPrx::_iceI_refreshSession(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "refreshSession";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const SessionNotExistException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
Glacier2::RouterPrx::destroySession(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &RouterPrx::_iceI_destroySession, context).get();
}

std::future<void>
Glacier2::RouterPrx::destroySessionAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &RouterPrx::_iceI_destroySession, context);
}

std::function<void()>
Glacier2::RouterPrx::destroySessionAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_destroySession, context);
}

void
Glacier2::RouterPrx::_iceI_destroySession(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "destroySession";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const SessionNotExistException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

std::int64_t
Glacier2::RouterPrx::getSessionTimeout(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int64_t>(true, this, &RouterPrx::_iceI_getSessionTimeout, context).get();
}

std::future<std::int64_t>
Glacier2::RouterPrx::getSessionTimeoutAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int64_t>(false, this, &RouterPrx::_iceI_getSessionTimeout, context);
}

std::function<void()>
Glacier2::RouterPrx::getSessionTimeoutAsync(std::function<void(std::int64_t)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int64_t>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_getSessionTimeout, context);
}

void
Glacier2::RouterPrx::_iceI_getSessionTimeout(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int64_t>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getSessionTimeout";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

std::int32_t
Glacier2::RouterPrx::getACMTimeout(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &RouterPrx::_iceI_getACMTimeout, context).get();
}

std::future<std::int32_t>
Glacier2::RouterPrx::getACMTimeoutAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &RouterPrx::_iceI_getACMTimeout, context);
}

std::function<void()>
Glacier2::RouterPrx::getACMTimeoutAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(exception), std::move(sent), this, &Glacier2::RouterPrx::_iceI_getACMTimeout, context);
}

void
Glacier2::RouterPrx::_iceI_getACMTimeout(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getACMTimeout";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
Glacier2::RouterPrx::ice_staticId() noexcept
{
    return "::Glacier2::Router";
}

const char*
Glacier2::SessionNotExistException::ice_staticId() noexcept
{
    return "::Glacier2::SessionNotExistException";
}

const char*
Glacier2::SessionNotExistException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Glacier2::SessionNotExistException::ice_throw() const
{
    throw *this;
}

void
Glacier2::SessionNotExistException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Glacier2::SessionNotExistException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

void
Glacier2::Router::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 14> allOperations{"addProxies", "createSession", "createSessionFromSecureConnection", "destroySession", "getACMTimeout", "getCategoryForClient", "getClientProxy", "getServerProxy", "getSessionTimeout", "ice_id", "ice_ids", "ice_isA", "ice_ping", "refreshSession"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_addProxies(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_createSession(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_createSessionFromSecureConnection(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_destroySession(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_getACMTimeout(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_getCategoryForClient(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_getClientProxy(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_getServerProxy(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_getSessionTimeout(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_refreshSession(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Glacier2::Router::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Glacier2::Router", "::Ice::Object", "::Ice::Router"};
    return allTypeIds;
}

std::string
Glacier2::Router::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
Glacier2::Router::_iceD_getCategoryForClient(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::string ret = this->getCategoryForClient(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
Glacier2::Router::_iceD_createSession(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_userId;
    std::string iceP_password;
    istr->readAll(iceP_userId, iceP_password);
    istr->endEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const std::optional<SessionPrx>& ret)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(ret);
            });
    };
    try
    {
        this->createSessionAsync(std::move(iceP_userId), std::move(iceP_password), std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}

void
Glacier2::Router::_iceD_createSessionFromSecureConnection(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const std::optional<SessionPrx>& ret)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(ret);
            });
    };
    try
    {
        this->createSessionFromSecureConnectionAsync(std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}

void
Glacier2::Router::_iceD_refreshSession(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    this->refreshSession(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
Glacier2::Router::_iceD_destroySession(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    this->destroySession(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
Glacier2::Router::_iceD_getSessionTimeout(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::int64_t ret = this->getSessionTimeout(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
Glacier2::Router::_iceD_getACMTimeout(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::int32_t ret = this->getACMTimeout(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

const char*
Glacier2::Router::ice_staticId() noexcept
{
    return "::Glacier2::Router";
}
