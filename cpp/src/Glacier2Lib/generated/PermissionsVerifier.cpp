// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'PermissionsVerifier.ice'.</auto-generated>

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "Glacier2/PermissionsVerifier.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::Glacier2::PermissionDeniedException> iceC_Glacier2_PermissionDeniedException_init;
}

Glacier2::PermissionsVerifierPrx::~PermissionsVerifierPrx() = default;

bool
Glacier2::PermissionsVerifierPrx::checkPermissions(std::string_view iceP_userId, std::string_view iceP_password, std::string& iceP_reason, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<bool, std::string>>(true, this, &PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context).get();
    iceP_reason = std::move(std::get<1>(result));
    return std::get<0>(result);
}

std::future<std::tuple<bool, std::string>>
Glacier2::PermissionsVerifierPrx::checkPermissionsAsync(std::string_view iceP_userId, std::string_view iceP_password, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<bool, std::string>>(false, this, &PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context);
}

std::function<void()>
Glacier2::PermissionsVerifierPrx::checkPermissionsAsync(std::string_view iceP_userId, std::string_view iceP_password, std::function<void(bool, std::string)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<bool, std::string>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<bool, std::string>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Glacier2::PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context);
}

void
Glacier2::PermissionsVerifierPrx::_iceI_checkPermissions(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<bool, std::string>>>& outAsync, std::string_view iceP_userId, std::string_view iceP_password, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "checkPermissions";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId, iceP_password);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const PermissionDeniedException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        },
        [](Ice::InputStream* istr)
        {
            std::tuple<bool, std::string> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

const char*
Glacier2::PermissionsVerifierPrx::ice_staticId() noexcept
{
    return "::Glacier2::PermissionsVerifier";
}

Glacier2::SSLPermissionsVerifierPrx::~SSLPermissionsVerifierPrx() = default;

bool
Glacier2::SSLPermissionsVerifierPrx::authorize(const SSLInfo& iceP_info, std::string& iceP_reason, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<bool, std::string>>(true, this, &SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context).get();
    iceP_reason = std::move(std::get<1>(result));
    return std::get<0>(result);
}

std::future<std::tuple<bool, std::string>>
Glacier2::SSLPermissionsVerifierPrx::authorizeAsync(const SSLInfo& iceP_info, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<bool, std::string>>(false, this, &SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context);
}

std::function<void()>
Glacier2::SSLPermissionsVerifierPrx::authorizeAsync(const SSLInfo& iceP_info, std::function<void(bool, std::string)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<bool, std::string>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<bool, std::string>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Glacier2::SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context);
}

void
Glacier2::SSLPermissionsVerifierPrx::_iceI_authorize(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<bool, std::string>>>& outAsync, const SSLInfo& iceP_info, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "authorize";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_info);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const PermissionDeniedException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        },
        [](Ice::InputStream* istr)
        {
            std::tuple<bool, std::string> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

const char*
Glacier2::SSLPermissionsVerifierPrx::ice_staticId() noexcept
{
    return "::Glacier2::SSLPermissionsVerifier";
}

void
Glacier2::PermissionDeniedException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "reason = ", this->reason);
}

const char*
Glacier2::PermissionDeniedException::ice_staticId() noexcept
{
    return "::Glacier2::PermissionDeniedException";
}

const char*
Glacier2::PermissionDeniedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Glacier2::PermissionDeniedException::ice_throw() const
{
    throw *this;
}

void
Glacier2::PermissionDeniedException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->reason);
    ostr->endSlice();
}

void
Glacier2::PermissionDeniedException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->reason);
    istr->endSlice();
}

void
Glacier2::PermissionsVerifier::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"checkPermissions", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_checkPermissions(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Glacier2::PermissionsVerifier::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Glacier2::PermissionsVerifier", "::Ice::Object"};
    return allTypeIds;
}

std::string
Glacier2::PermissionsVerifier::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
Glacier2::PermissionsVerifier::_iceD_checkPermissions(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_userId;
    std::string iceP_password;
    istr->readAll(iceP_userId, iceP_password);
    istr->endEncapsulation();
    std::string iceP_reason;
    const bool ret = this->checkPermissions(std::move(iceP_userId), std::move(iceP_password), iceP_reason, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason, ret);
        },
        request.current()));
}

const char*
Glacier2::PermissionsVerifier::ice_staticId() noexcept
{
    return "::Glacier2::PermissionsVerifier";
}

void
Glacier2::SSLPermissionsVerifier::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"authorize", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_authorize(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Glacier2::SSLPermissionsVerifier::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Glacier2::SSLPermissionsVerifier", "::Ice::Object"};
    return allTypeIds;
}

std::string
Glacier2::SSLPermissionsVerifier::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
Glacier2::SSLPermissionsVerifier::_iceD_authorize(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SSLInfo iceP_info;
    istr->readAll(iceP_info);
    istr->endEncapsulation();
    std::string iceP_reason;
    const bool ret = this->authorize(std::move(iceP_info), iceP_reason, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason, ret);
        },
        request.current()));
}

const char*
Glacier2::SSLPermissionsVerifier::ice_staticId() noexcept
{
    return "::Glacier2::SSLPermissionsVerifier";
}
