// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Metrics.ice'.</auto-generated>

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "Glacier2/Metrics.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ClassInit<::IceMX::SessionMetrics> iceC_IceMX_SessionMetrics_init;
}

const char*
IceMX::SessionMetrics::ice_staticId() noexcept
{
    return "::IceMX::SessionMetrics";
}

const char*
IceMX::SessionMetrics::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceMX::SessionMetrics::ice_printFields(std::ostream& os) const
{
    Metrics::ice_printFields(os);
    Ice::print(os << ", forwardedClient = ", this->forwardedClient);
    Ice::print(os << ", forwardedServer = ", this->forwardedServer);
    Ice::print(os << ", routingTableSize = ", this->routingTableSize);
    Ice::print(os << ", queuedClient = ", this->queuedClient);
    Ice::print(os << ", queuedServer = ", this->queuedServer);
    Ice::print(os << ", overriddenClient = ", this->overriddenClient);
    Ice::print(os << ", overriddenServer = ", this->overriddenServer);
}

Ice::ValuePtr
IceMX::SessionMetrics::_iceCloneImpl() const
{
    return CloneEnabler<SessionMetrics>::clone(*this);
}

void
IceMX::SessionMetrics::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->forwardedClient, this->forwardedServer, this->routingTableSize, this->queuedClient, this->queuedServer, this->overriddenClient, this->overriddenServer);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::SessionMetrics::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->forwardedClient, this->forwardedServer, this->routingTableSize, this->queuedClient, this->queuedServer, this->overriddenClient, this->overriddenServer);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}
