// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Metrics.ice'.</auto-generated>

#ifndef ICESTORM_API_EXPORTS
#   define ICESTORM_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceStorm/Metrics.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ClassInit<::IceMX::TopicMetrics> iceC_IceMX_TopicMetrics_init;
    const IceInternal::ClassInit<::IceMX::SubscriberMetrics> iceC_IceMX_SubscriberMetrics_init;
}

const char*
IceMX::TopicMetrics::ice_staticId() noexcept
{
    return "::IceMX::TopicMetrics";
}

const char*
IceMX::TopicMetrics::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceMX::TopicMetrics::ice_printFields(std::ostream& os) const
{
    Metrics::ice_printFields(os);
    Ice::print(os << ", published = ", this->published);
    Ice::print(os << ", forwarded = ", this->forwarded);
}

Ice::ValuePtr
IceMX::TopicMetrics::_iceCloneImpl() const
{
    return CloneEnabler<TopicMetrics>::clone(*this);
}

void
IceMX::TopicMetrics::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->published, this->forwarded);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::TopicMetrics::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->published, this->forwarded);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}

const char*
IceMX::SubscriberMetrics::ice_staticId() noexcept
{
    return "::IceMX::SubscriberMetrics";
}

const char*
IceMX::SubscriberMetrics::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceMX::SubscriberMetrics::ice_printFields(std::ostream& os) const
{
    Metrics::ice_printFields(os);
    Ice::print(os << ", queued = ", this->queued);
    Ice::print(os << ", outstanding = ", this->outstanding);
    Ice::print(os << ", delivered = ", this->delivered);
}

Ice::ValuePtr
IceMX::SubscriberMetrics::_iceCloneImpl() const
{
    return CloneEnabler<SubscriberMetrics>::clone(*this);
}

void
IceMX::SubscriberMetrics::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->queued, this->outstanding, this->delivered);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::SubscriberMetrics::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->queued, this->outstanding, this->delivered);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}
