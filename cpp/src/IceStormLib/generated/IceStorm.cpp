// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'IceStorm.ice'.</auto-generated>

#ifndef ICESTORM_API_EXPORTS
#   define ICESTORM_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceStorm/IceStorm.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::IceStorm::LinkExists> iceC_IceStorm_LinkExists_init;
    const IceInternal::ExceptionInit<::IceStorm::NoSuchLink> iceC_IceStorm_NoSuchLink_init;
    const IceInternal::ExceptionInit<::IceStorm::AlreadySubscribed> iceC_IceStorm_AlreadySubscribed_init;
    const IceInternal::ExceptionInit<::IceStorm::BadQoS> iceC_IceStorm_BadQoS_init;
    const IceInternal::ExceptionInit<::IceStorm::TopicExists> iceC_IceStorm_TopicExists_init;
    const IceInternal::ExceptionInit<::IceStorm::NoSuchTopic> iceC_IceStorm_NoSuchTopic_init;
}

IceStorm::TopicPrx::~TopicPrx() = default;

std::string
IceStorm::TopicPrx::getName(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(true, this, &TopicPrx::_iceI_getName, context).get();
}

std::future<std::string>
IceStorm::TopicPrx::getNameAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(false, this, &TopicPrx::_iceI_getName, context);
}

std::function<void()>
IceStorm::TopicPrx::getNameAsync(std::function<void(std::string)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::string>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_getName, context);
}

void
IceStorm::TopicPrx::_iceI_getName(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::string>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getName";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

std::optional<Ice::ObjectPrx>
IceStorm::TopicPrx::getPublisher(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(true, this, &TopicPrx::_iceI_getPublisher, context).get();
}

std::future<std::optional<Ice::ObjectPrx>>
IceStorm::TopicPrx::getPublisherAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(false, this, &TopicPrx::_iceI_getPublisher, context);
}

std::function<void()>
IceStorm::TopicPrx::getPublisherAsync(std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<Ice::ObjectPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_getPublisher, context);
}

void
IceStorm::TopicPrx::_iceI_getPublisher(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getPublisher";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

std::optional<Ice::ObjectPrx>
IceStorm::TopicPrx::getNonReplicatedPublisher(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(true, this, &TopicPrx::_iceI_getNonReplicatedPublisher, context).get();
}

std::future<std::optional<Ice::ObjectPrx>>
IceStorm::TopicPrx::getNonReplicatedPublisherAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(false, this, &TopicPrx::_iceI_getNonReplicatedPublisher, context);
}

std::function<void()>
IceStorm::TopicPrx::getNonReplicatedPublisherAsync(std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<Ice::ObjectPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_getNonReplicatedPublisher, context);
}

void
IceStorm::TopicPrx::_iceI_getNonReplicatedPublisher(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getNonReplicatedPublisher";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

std::optional<Ice::ObjectPrx>
IceStorm::TopicPrx::subscribeAndGetPublisher(const QoS& iceP_theQoS, const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(true, this, &TopicPrx::_iceI_subscribeAndGetPublisher, iceP_theQoS, iceP_subscriber, context).get();
}

std::future<std::optional<Ice::ObjectPrx>>
IceStorm::TopicPrx::subscribeAndGetPublisherAsync(const QoS& iceP_theQoS, const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<Ice::ObjectPrx>>(false, this, &TopicPrx::_iceI_subscribeAndGetPublisher, iceP_theQoS, iceP_subscriber, context);
}

std::function<void()>
IceStorm::TopicPrx::subscribeAndGetPublisherAsync(const QoS& iceP_theQoS, const std::optional<Ice::ObjectPrx>& iceP_subscriber, std::function<void(std::optional<Ice::ObjectPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<Ice::ObjectPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_subscribeAndGetPublisher, iceP_theQoS, iceP_subscriber, context);
}

void
IceStorm::TopicPrx::_iceI_subscribeAndGetPublisher(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<Ice::ObjectPrx>>>& outAsync, const QoS& iceP_theQoS, const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "subscribeAndGetPublisher";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theQoS, iceP_subscriber);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const AlreadySubscribed&)
            {
                throw;
            }
            catch (const BadQoS&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
IceStorm::TopicPrx::unsubscribe(const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicPrx::_iceI_unsubscribe, iceP_subscriber, context).get();
}

std::future<void>
IceStorm::TopicPrx::unsubscribeAsync(const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicPrx::_iceI_unsubscribe, iceP_subscriber, context);
}

std::function<void()>
IceStorm::TopicPrx::unsubscribeAsync(const std::optional<Ice::ObjectPrx>& iceP_subscriber, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_unsubscribe, iceP_subscriber, context);
}

void
IceStorm::TopicPrx::_iceI_unsubscribe(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<Ice::ObjectPrx>& iceP_subscriber, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "unsubscribe";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_subscriber);
        },
        nullptr);
}

void
IceStorm::TopicPrx::link(const std::optional<TopicPrx>& iceP_linkTo, std::int32_t iceP_cost, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicPrx::_iceI_link, iceP_linkTo, iceP_cost, context).get();
}

std::future<void>
IceStorm::TopicPrx::linkAsync(const std::optional<TopicPrx>& iceP_linkTo, std::int32_t iceP_cost, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicPrx::_iceI_link, iceP_linkTo, iceP_cost, context);
}

std::function<void()>
IceStorm::TopicPrx::linkAsync(const std::optional<TopicPrx>& iceP_linkTo, std::int32_t iceP_cost, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_link, iceP_linkTo, iceP_cost, context);
}

void
IceStorm::TopicPrx::_iceI_link(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<TopicPrx>& iceP_linkTo, std::int32_t iceP_cost, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "link";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_linkTo, iceP_cost);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const LinkExists&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
IceStorm::TopicPrx::unlink(const std::optional<TopicPrx>& iceP_linkTo, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicPrx::_iceI_unlink, iceP_linkTo, context).get();
}

std::future<void>
IceStorm::TopicPrx::unlinkAsync(const std::optional<TopicPrx>& iceP_linkTo, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicPrx::_iceI_unlink, iceP_linkTo, context);
}

std::function<void()>
IceStorm::TopicPrx::unlinkAsync(const std::optional<TopicPrx>& iceP_linkTo, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_unlink, iceP_linkTo, context);
}

void
IceStorm::TopicPrx::_iceI_unlink(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<TopicPrx>& iceP_linkTo, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "unlink";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_linkTo);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const NoSuchLink&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

::IceStorm::LinkInfoSeq
IceStorm::TopicPrx::getLinkInfoSeq(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<LinkInfoSeq>(true, this, &TopicPrx::_iceI_getLinkInfoSeq, context).get();
}

std::future<::IceStorm::LinkInfoSeq>
IceStorm::TopicPrx::getLinkInfoSeqAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<LinkInfoSeq>(false, this, &TopicPrx::_iceI_getLinkInfoSeq, context);
}

std::function<void()>
IceStorm::TopicPrx::getLinkInfoSeqAsync(std::function<void(::IceStorm::LinkInfoSeq)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<LinkInfoSeq>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_getLinkInfoSeq, context);
}

void
IceStorm::TopicPrx::_iceI_getLinkInfoSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<LinkInfoSeq>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getLinkInfoSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

::Ice::IdentitySeq
IceStorm::TopicPrx::getSubscribers(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::Ice::IdentitySeq>(true, this, &TopicPrx::_iceI_getSubscribers, context).get();
}

std::future<::Ice::IdentitySeq>
IceStorm::TopicPrx::getSubscribersAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::Ice::IdentitySeq>(false, this, &TopicPrx::_iceI_getSubscribers, context);
}

std::function<void()>
IceStorm::TopicPrx::getSubscribersAsync(std::function<void(::Ice::IdentitySeq)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<::Ice::IdentitySeq>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_getSubscribers, context);
}

void
IceStorm::TopicPrx::_iceI_getSubscribers(const std::shared_ptr<IceInternal::OutgoingAsyncT<::Ice::IdentitySeq>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getSubscribers";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

void
IceStorm::TopicPrx::destroy(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicPrx::_iceI_destroy, context).get();
}

std::future<void>
IceStorm::TopicPrx::destroyAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicPrx::_iceI_destroy, context);
}

std::function<void()>
IceStorm::TopicPrx::destroyAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicPrx::_iceI_destroy, context);
}

void
IceStorm::TopicPrx::_iceI_destroy(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "destroy";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
IceStorm::TopicPrx::ice_staticId() noexcept
{
    return "::IceStorm::Topic";
}

IceStorm::TopicManagerPrx::~TopicManagerPrx() = default;

std::optional<::IceStorm::TopicPrx>
IceStorm::TopicManagerPrx::create(std::string_view iceP_name, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicPrx>>(true, this, &TopicManagerPrx::_iceI_create, iceP_name, context).get();
}

std::future<std::optional<::IceStorm::TopicPrx>>
IceStorm::TopicManagerPrx::createAsync(std::string_view iceP_name, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicPrx>>(false, this, &TopicManagerPrx::_iceI_create, iceP_name, context);
}

std::function<void()>
IceStorm::TopicManagerPrx::createAsync(std::string_view iceP_name, std::function<void(std::optional<::IceStorm::TopicPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<TopicPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicManagerPrx::_iceI_create, iceP_name, context);
}

void
IceStorm::TopicManagerPrx::_iceI_create(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<TopicPrx>>>& outAsync, std::string_view iceP_name, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "create";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const TopicExists&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

std::optional<::IceStorm::TopicPrx>
IceStorm::TopicManagerPrx::retrieve(std::string_view iceP_name, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicPrx>>(true, this, &TopicManagerPrx::_iceI_retrieve, iceP_name, context).get();
}

std::future<std::optional<::IceStorm::TopicPrx>>
IceStorm::TopicManagerPrx::retrieveAsync(std::string_view iceP_name, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicPrx>>(false, this, &TopicManagerPrx::_iceI_retrieve, iceP_name, context);
}

std::function<void()>
IceStorm::TopicManagerPrx::retrieveAsync(std::string_view iceP_name, std::function<void(std::optional<::IceStorm::TopicPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<TopicPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicManagerPrx::_iceI_retrieve, iceP_name, context);
}

void
IceStorm::TopicManagerPrx::_iceI_retrieve(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<TopicPrx>>>& outAsync, std::string_view iceP_name, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "retrieve";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const NoSuchTopic&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

::IceStorm::TopicDict
IceStorm::TopicManagerPrx::retrieveAll(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<TopicDict>(true, this, &TopicManagerPrx::_iceI_retrieveAll, context).get();
}

std::future<::IceStorm::TopicDict>
IceStorm::TopicManagerPrx::retrieveAllAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<TopicDict>(false, this, &TopicManagerPrx::_iceI_retrieveAll, context);
}

std::function<void()>
IceStorm::TopicManagerPrx::retrieveAllAsync(std::function<void(::IceStorm::TopicDict)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<TopicDict>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicManagerPrx::_iceI_retrieveAll, context);
}

void
IceStorm::TopicManagerPrx::_iceI_retrieveAll(const std::shared_ptr<IceInternal::OutgoingAsyncT<TopicDict>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "retrieveAll";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
IceStorm::TopicManagerPrx::ice_staticId() noexcept
{
    return "::IceStorm::TopicManager";
}

IceStorm::FinderPrx::~FinderPrx() = default;

std::optional<::IceStorm::TopicManagerPrx>
IceStorm::FinderPrx::getTopicManager(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicManagerPrx>>(true, this, &FinderPrx::_iceI_getTopicManager, context).get();
}

std::future<std::optional<::IceStorm::TopicManagerPrx>>
IceStorm::FinderPrx::getTopicManagerAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicManagerPrx>>(false, this, &FinderPrx::_iceI_getTopicManager, context);
}

std::function<void()>
IceStorm::FinderPrx::getTopicManagerAsync(std::function<void(std::optional<::IceStorm::TopicManagerPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<TopicManagerPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::FinderPrx::_iceI_getTopicManager, context);
}

void
IceStorm::FinderPrx::_iceI_getTopicManager(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<TopicManagerPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getTopicManager";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
IceStorm::FinderPrx::ice_staticId() noexcept
{
    return "::IceStorm::Finder";
}

void
IceStorm::LinkInfo::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "theTopic = ", this->theTopic);
    Ice::print(os << ", name = ", this->name);
    Ice::print(os << ", cost = ", this->cost);
}

std::ostream&
IceStorm::operator<<(std::ostream& os, const ::IceStorm::LinkInfo& value)
{
    os << "IceStorm::LinkInfo{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceStorm::LinkExists::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
}

const char*
IceStorm::LinkExists::ice_staticId() noexcept
{
    return "::IceStorm::LinkExists";
}

const char*
IceStorm::LinkExists::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::LinkExists::ice_throw() const
{
    throw *this;
}

void
IceStorm::LinkExists::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->name);
    ostr->endSlice();
}

void
IceStorm::LinkExists::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->name);
    istr->endSlice();
}

void
IceStorm::NoSuchLink::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
}

const char*
IceStorm::NoSuchLink::ice_staticId() noexcept
{
    return "::IceStorm::NoSuchLink";
}

const char*
IceStorm::NoSuchLink::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::NoSuchLink::ice_throw() const
{
    throw *this;
}

void
IceStorm::NoSuchLink::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->name);
    ostr->endSlice();
}

void
IceStorm::NoSuchLink::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->name);
    istr->endSlice();
}

const char*
IceStorm::AlreadySubscribed::ice_staticId() noexcept
{
    return "::IceStorm::AlreadySubscribed";
}

const char*
IceStorm::AlreadySubscribed::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::AlreadySubscribed::ice_throw() const
{
    throw *this;
}

void
IceStorm::AlreadySubscribed::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceStorm::AlreadySubscribed::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

void
IceStorm::BadQoS::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "reason = ", this->reason);
}

const char*
IceStorm::BadQoS::ice_staticId() noexcept
{
    return "::IceStorm::BadQoS";
}

const char*
IceStorm::BadQoS::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::BadQoS::ice_throw() const
{
    throw *this;
}

void
IceStorm::BadQoS::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->reason);
    ostr->endSlice();
}

void
IceStorm::BadQoS::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->reason);
    istr->endSlice();
}

void
IceStorm::TopicExists::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
}

const char*
IceStorm::TopicExists::ice_staticId() noexcept
{
    return "::IceStorm::TopicExists";
}

const char*
IceStorm::TopicExists::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::TopicExists::ice_throw() const
{
    throw *this;
}

void
IceStorm::TopicExists::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->name);
    ostr->endSlice();
}

void
IceStorm::TopicExists::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->name);
    istr->endSlice();
}

void
IceStorm::NoSuchTopic::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
}

const char*
IceStorm::NoSuchTopic::ice_staticId() noexcept
{
    return "::IceStorm::NoSuchTopic";
}

const char*
IceStorm::NoSuchTopic::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::NoSuchTopic::ice_throw() const
{
    throw *this;
}

void
IceStorm::NoSuchTopic::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->name);
    ostr->endSlice();
}

void
IceStorm::NoSuchTopic::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->name);
    istr->endSlice();
}

void
IceStorm::Topic::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 14> allOperations{"destroy", "getLinkInfoSeq", "getName", "getNonReplicatedPublisher", "getPublisher", "getSubscribers", "ice_id", "ice_ids", "ice_isA", "ice_ping", "link", "subscribeAndGetPublisher", "unlink", "unsubscribe"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_destroy(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getLinkInfoSeq(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getName(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_getNonReplicatedPublisher(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_getPublisher(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_getSubscribers(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_link(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_subscribeAndGetPublisher(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_unlink(request, std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_unsubscribe(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::Topic::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::Topic"};
    return allTypeIds;
}

std::string
IceStorm::Topic::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::Topic::_iceD_getName(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::string ret = this->getName(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_getPublisher(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<Ice::ObjectPrx> ret = this->getPublisher(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_getNonReplicatedPublisher(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<Ice::ObjectPrx> ret = this->getNonReplicatedPublisher(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_subscribeAndGetPublisher(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    QoS iceP_theQoS;
    std::optional<Ice::ObjectPrx> iceP_subscriber;
    istr->readAll(iceP_theQoS, iceP_subscriber);
    istr->endEncapsulation();
    const std::optional<Ice::ObjectPrx> ret = this->subscribeAndGetPublisher(std::move(iceP_theQoS), std::move(iceP_subscriber), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_unsubscribe(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<Ice::ObjectPrx> iceP_subscriber;
    istr->readAll(iceP_subscriber);
    istr->endEncapsulation();
    this->unsubscribe(std::move(iceP_subscriber), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceStorm::Topic::_iceD_link(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<TopicPrx> iceP_linkTo;
    std::int32_t iceP_cost;
    istr->readAll(iceP_linkTo, iceP_cost);
    istr->endEncapsulation();
    this->link(std::move(iceP_linkTo), iceP_cost, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceStorm::Topic::_iceD_unlink(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<TopicPrx> iceP_linkTo;
    istr->readAll(iceP_linkTo);
    istr->endEncapsulation();
    this->unlink(std::move(iceP_linkTo), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceStorm::Topic::_iceD_getLinkInfoSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const LinkInfoSeq ret = this->getLinkInfoSeq(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_getSubscribers(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    const ::Ice::IdentitySeq ret = this->getSubscribers(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::Topic::_iceD_destroy(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    this->destroy(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

const char*
IceStorm::Topic::ice_staticId() noexcept
{
    return "::IceStorm::Topic";
}

void
IceStorm::TopicManager::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 7> allOperations{"create", "ice_id", "ice_ids", "ice_isA", "ice_ping", "retrieve", "retrieveAll"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_create(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_retrieve(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_retrieveAll(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::TopicManager::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::TopicManager"};
    return allTypeIds;
}

std::string
IceStorm::TopicManager::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::TopicManager::_iceD_create(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_name;
    istr->readAll(iceP_name);
    istr->endEncapsulation();
    const std::optional<TopicPrx> ret = this->create(std::move(iceP_name), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::TopicManager::_iceD_retrieve(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_name;
    istr->readAll(iceP_name);
    istr->endEncapsulation();
    const std::optional<TopicPrx> ret = this->retrieve(std::move(iceP_name), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::TopicManager::_iceD_retrieveAll(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const TopicDict ret = this->retrieveAll(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

const char*
IceStorm::TopicManager::ice_staticId() noexcept
{
    return "::IceStorm::TopicManager";
}

void
IceStorm::Finder::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"getTopicManager", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_getTopicManager(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::Finder::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::Finder"};
    return allTypeIds;
}

std::string
IceStorm::Finder::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::Finder::_iceD_getTopicManager(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<TopicManagerPrx> ret = this->getTopicManager(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

const char*
IceStorm::Finder::ice_staticId() noexcept
{
    return "::IceStorm::Finder";
}
