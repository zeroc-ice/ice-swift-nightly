// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Descriptor.ice'.</auto-generated>

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceGrid/Descriptor.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ClassInit<::IceGrid::CommunicatorDescriptor> iceC_IceGrid_CommunicatorDescriptor_init;
    const IceInternal::ClassInit<::IceGrid::ServerDescriptor> iceC_IceGrid_ServerDescriptor_init;
    const IceInternal::ClassInit<::IceGrid::ServiceDescriptor> iceC_IceGrid_ServiceDescriptor_init;
    const IceInternal::ClassInit<::IceGrid::IceBoxDescriptor> iceC_IceGrid_IceBoxDescriptor_init;
    const IceInternal::ClassInit<::IceGrid::LoadBalancingPolicy> iceC_IceGrid_LoadBalancingPolicy_init;
    const IceInternal::ClassInit<::IceGrid::RandomLoadBalancingPolicy> iceC_IceGrid_RandomLoadBalancingPolicy_init;
    const IceInternal::ClassInit<::IceGrid::OrderedLoadBalancingPolicy> iceC_IceGrid_OrderedLoadBalancingPolicy_init;
    const IceInternal::ClassInit<::IceGrid::RoundRobinLoadBalancingPolicy> iceC_IceGrid_RoundRobinLoadBalancingPolicy_init;
    const IceInternal::ClassInit<::IceGrid::AdaptiveLoadBalancingPolicy> iceC_IceGrid_AdaptiveLoadBalancingPolicy_init;
    const IceInternal::ClassInit<::IceGrid::BoxedString> iceC_IceGrid_BoxedString_init;
    const IceInternal::ClassInit<::IceGrid::BoxedDistributionDescriptor> iceC_IceGrid_BoxedDistributionDescriptor_init;
}

void
IceGrid::PropertyDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
    Ice::print(os << ", value = ", this->value);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::PropertyDescriptor& value)
{
    os << "IceGrid::PropertyDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::PropertySetDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "references = ", this->references);
    Ice::print(os << ", properties = ", this->properties);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::PropertySetDescriptor& value)
{
    os << "IceGrid::PropertySetDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::ObjectDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "id = ", this->id);
    Ice::print(os << ", type = ", this->type);
    Ice::print(os << ", proxyOptions = ", this->proxyOptions);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ObjectDescriptor& value)
{
    os << "IceGrid::ObjectDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::AdapterDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", id = ", this->id);
    Ice::print(os << ", replicaGroupId = ", this->replicaGroupId);
    Ice::print(os << ", priority = ", this->priority);
    Ice::print(os << ", registerProcess = ", this->registerProcess);
    Ice::print(os << ", serverLifetime = ", this->serverLifetime);
    Ice::print(os << ", objects = ", this->objects);
    Ice::print(os << ", allocatables = ", this->allocatables);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::AdapterDescriptor& value)
{
    os << "IceGrid::AdapterDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::CommunicatorDescriptor::ice_staticId() noexcept
{
    return "::IceGrid::CommunicatorDescriptor";
}

const char*
IceGrid::CommunicatorDescriptor::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::CommunicatorDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "adapters = ", this->adapters);
    Ice::print(os << ", propertySet = ", this->propertySet);
    Ice::print(os << ", logs = ", this->logs);
    Ice::print(os << ", description = ", this->description);
}

Ice::ValuePtr
IceGrid::CommunicatorDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<CommunicatorDescriptor>::clone(*this);
}

void
IceGrid::CommunicatorDescriptor::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->adapters, this->propertySet, this->logs, this->description);
    ostr->endSlice();
}

void
IceGrid::CommunicatorDescriptor::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->adapters, this->propertySet, this->logs, this->description);
    istr->endSlice();
}

void
IceGrid::DistributionDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "icepatch = ", this->icepatch);
    Ice::print(os << ", directories = ", this->directories);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::DistributionDescriptor& value)
{
    os << "IceGrid::DistributionDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::ServerDescriptor::ice_staticId() noexcept
{
    return "::IceGrid::ServerDescriptor";
}

const char*
IceGrid::ServerDescriptor::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::ServerDescriptor::ice_printFields(std::ostream& os) const
{
    CommunicatorDescriptor::ice_printFields(os);
    Ice::print(os << ", id = ", this->id);
    Ice::print(os << ", exe = ", this->exe);
    Ice::print(os << ", iceVersion = ", this->iceVersion);
    Ice::print(os << ", pwd = ", this->pwd);
    Ice::print(os << ", options = ", this->options);
    Ice::print(os << ", envs = ", this->envs);
    Ice::print(os << ", activation = ", this->activation);
    Ice::print(os << ", activationTimeout = ", this->activationTimeout);
    Ice::print(os << ", deactivationTimeout = ", this->deactivationTimeout);
    Ice::print(os << ", applicationDistrib = ", this->applicationDistrib);
    Ice::print(os << ", distrib = ", this->distrib);
    Ice::print(os << ", allocatable = ", this->allocatable);
    Ice::print(os << ", user = ", this->user);
}

Ice::ValuePtr
IceGrid::ServerDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<ServerDescriptor>::clone(*this);
}

void
IceGrid::ServerDescriptor::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->id, this->exe, this->iceVersion, this->pwd, this->options, this->envs, this->activation, this->activationTimeout, this->deactivationTimeout, this->applicationDistrib, this->distrib, this->allocatable, this->user);
    ostr->endSlice();
    CommunicatorDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::ServerDescriptor::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->id, this->exe, this->iceVersion, this->pwd, this->options, this->envs, this->activation, this->activationTimeout, this->deactivationTimeout, this->applicationDistrib, this->distrib, this->allocatable, this->user);
    istr->endSlice();
    CommunicatorDescriptor::_iceReadImpl(istr);
}

const char*
IceGrid::ServiceDescriptor::ice_staticId() noexcept
{
    return "::IceGrid::ServiceDescriptor";
}

const char*
IceGrid::ServiceDescriptor::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::ServiceDescriptor::ice_printFields(std::ostream& os) const
{
    CommunicatorDescriptor::ice_printFields(os);
    Ice::print(os << ", name = ", this->name);
    Ice::print(os << ", entry = ", this->entry);
}

Ice::ValuePtr
IceGrid::ServiceDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<ServiceDescriptor>::clone(*this);
}

void
IceGrid::ServiceDescriptor::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->name, this->entry);
    ostr->endSlice();
    CommunicatorDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::ServiceDescriptor::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->name, this->entry);
    istr->endSlice();
    CommunicatorDescriptor::_iceReadImpl(istr);
}

void
IceGrid::ServerInstanceDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "templateName = ", this->templateName);
    Ice::print(os << ", parameterValues = ", this->parameterValues);
    Ice::print(os << ", propertySet = ", this->propertySet);
    Ice::print(os << ", servicePropertySets = ", this->servicePropertySets);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ServerInstanceDescriptor& value)
{
    os << "IceGrid::ServerInstanceDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::TemplateDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "descriptor = ", this->descriptor);
    Ice::print(os << ", parameters = ", this->parameters);
    Ice::print(os << ", parameterDefaults = ", this->parameterDefaults);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::TemplateDescriptor& value)
{
    os << "IceGrid::TemplateDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::ServiceInstanceDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "templateName = ", this->templateName);
    Ice::print(os << ", parameterValues = ", this->parameterValues);
    Ice::print(os << ", descriptor = ", this->descriptor);
    Ice::print(os << ", propertySet = ", this->propertySet);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ServiceInstanceDescriptor& value)
{
    os << "IceGrid::ServiceInstanceDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::IceBoxDescriptor::ice_staticId() noexcept
{
    return "::IceGrid::IceBoxDescriptor";
}

const char*
IceGrid::IceBoxDescriptor::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::IceBoxDescriptor::ice_printFields(std::ostream& os) const
{
    ServerDescriptor::ice_printFields(os);
    Ice::print(os << ", services = ", this->services);
}

Ice::ValuePtr
IceGrid::IceBoxDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<IceBoxDescriptor>::clone(*this);
}

void
IceGrid::IceBoxDescriptor::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->services);
    ostr->endSlice();
    ServerDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::IceBoxDescriptor::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->services);
    istr->endSlice();
    ServerDescriptor::_iceReadImpl(istr);
}

void
IceGrid::NodeDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "variables = ", this->variables);
    Ice::print(os << ", serverInstances = ", this->serverInstances);
    Ice::print(os << ", servers = ", this->servers);
    Ice::print(os << ", loadFactor = ", this->loadFactor);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", propertySets = ", this->propertySets);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::NodeDescriptor& value)
{
    os << "IceGrid::NodeDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::LoadBalancingPolicy::ice_staticId() noexcept
{
    return "::IceGrid::LoadBalancingPolicy";
}

const char*
IceGrid::LoadBalancingPolicy::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::LoadBalancingPolicy::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "nReplicas = ", this->nReplicas);
}

Ice::ValuePtr
IceGrid::LoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<LoadBalancingPolicy>::clone(*this);
}

void
IceGrid::LoadBalancingPolicy::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->nReplicas);
    ostr->endSlice();
}

void
IceGrid::LoadBalancingPolicy::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->nReplicas);
    istr->endSlice();
}

const char*
IceGrid::RandomLoadBalancingPolicy::ice_staticId() noexcept
{
    return "::IceGrid::RandomLoadBalancingPolicy";
}

const char*
IceGrid::RandomLoadBalancingPolicy::ice_id() const noexcept
{
    return ice_staticId();
}

Ice::ValuePtr
IceGrid::RandomLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<RandomLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::RandomLoadBalancingPolicy::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::RandomLoadBalancingPolicy::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

const char*
IceGrid::OrderedLoadBalancingPolicy::ice_staticId() noexcept
{
    return "::IceGrid::OrderedLoadBalancingPolicy";
}

const char*
IceGrid::OrderedLoadBalancingPolicy::ice_id() const noexcept
{
    return ice_staticId();
}

Ice::ValuePtr
IceGrid::OrderedLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<OrderedLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::OrderedLoadBalancingPolicy::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::OrderedLoadBalancingPolicy::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

const char*
IceGrid::RoundRobinLoadBalancingPolicy::ice_staticId() noexcept
{
    return "::IceGrid::RoundRobinLoadBalancingPolicy";
}

const char*
IceGrid::RoundRobinLoadBalancingPolicy::ice_id() const noexcept
{
    return ice_staticId();
}

Ice::ValuePtr
IceGrid::RoundRobinLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<RoundRobinLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::RoundRobinLoadBalancingPolicy::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::RoundRobinLoadBalancingPolicy::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

const char*
IceGrid::AdaptiveLoadBalancingPolicy::ice_staticId() noexcept
{
    return "::IceGrid::AdaptiveLoadBalancingPolicy";
}

const char*
IceGrid::AdaptiveLoadBalancingPolicy::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::AdaptiveLoadBalancingPolicy::ice_printFields(std::ostream& os) const
{
    LoadBalancingPolicy::ice_printFields(os);
    Ice::print(os << ", loadSample = ", this->loadSample);
}

Ice::ValuePtr
IceGrid::AdaptiveLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<AdaptiveLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::AdaptiveLoadBalancingPolicy::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->loadSample);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::AdaptiveLoadBalancingPolicy::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->loadSample);
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

void
IceGrid::ReplicaGroupDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "id = ", this->id);
    Ice::print(os << ", loadBalancing = ", this->loadBalancing);
    Ice::print(os << ", proxyOptions = ", this->proxyOptions);
    Ice::print(os << ", objects = ", this->objects);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", filter = ", this->filter);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ReplicaGroupDescriptor& value)
{
    os << "IceGrid::ReplicaGroupDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
IceGrid::ApplicationDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
    Ice::print(os << ", variables = ", this->variables);
    Ice::print(os << ", replicaGroups = ", this->replicaGroups);
    Ice::print(os << ", serverTemplates = ", this->serverTemplates);
    Ice::print(os << ", serviceTemplates = ", this->serviceTemplates);
    Ice::print(os << ", nodes = ", this->nodes);
    Ice::print(os << ", distrib = ", this->distrib);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", propertySets = ", this->propertySets);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ApplicationDescriptor& value)
{
    os << "IceGrid::ApplicationDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::BoxedString::ice_staticId() noexcept
{
    return "::IceGrid::BoxedString";
}

const char*
IceGrid::BoxedString::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::BoxedString::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "value = ", this->value);
}

Ice::ValuePtr
IceGrid::BoxedString::_iceCloneImpl() const
{
    return CloneEnabler<BoxedString>::clone(*this);
}

void
IceGrid::BoxedString::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->value);
    ostr->endSlice();
}

void
IceGrid::BoxedString::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->value);
    istr->endSlice();
}

void
IceGrid::NodeUpdateDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", variables = ", this->variables);
    Ice::print(os << ", removeVariables = ", this->removeVariables);
    Ice::print(os << ", propertySets = ", this->propertySets);
    Ice::print(os << ", removePropertySets = ", this->removePropertySets);
    Ice::print(os << ", serverInstances = ", this->serverInstances);
    Ice::print(os << ", servers = ", this->servers);
    Ice::print(os << ", removeServers = ", this->removeServers);
    Ice::print(os << ", loadFactor = ", this->loadFactor);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::NodeUpdateDescriptor& value)
{
    os << "IceGrid::NodeUpdateDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceGrid::BoxedDistributionDescriptor::ice_staticId() noexcept
{
    return "::IceGrid::BoxedDistributionDescriptor";
}

const char*
IceGrid::BoxedDistributionDescriptor::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::BoxedDistributionDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "value = ", this->value);
}

Ice::ValuePtr
IceGrid::BoxedDistributionDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<BoxedDistributionDescriptor>::clone(*this);
}

void
IceGrid::BoxedDistributionDescriptor::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->value);
    ostr->endSlice();
}

void
IceGrid::BoxedDistributionDescriptor::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->value);
    istr->endSlice();
}

void
IceGrid::ApplicationUpdateDescriptor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
    Ice::print(os << ", description = ", this->description);
    Ice::print(os << ", distrib = ", this->distrib);
    Ice::print(os << ", variables = ", this->variables);
    Ice::print(os << ", removeVariables = ", this->removeVariables);
    Ice::print(os << ", propertySets = ", this->propertySets);
    Ice::print(os << ", removePropertySets = ", this->removePropertySets);
    Ice::print(os << ", replicaGroups = ", this->replicaGroups);
    Ice::print(os << ", removeReplicaGroups = ", this->removeReplicaGroups);
    Ice::print(os << ", serverTemplates = ", this->serverTemplates);
    Ice::print(os << ", removeServerTemplates = ", this->removeServerTemplates);
    Ice::print(os << ", serviceTemplates = ", this->serviceTemplates);
    Ice::print(os << ", removeServiceTemplates = ", this->removeServiceTemplates);
    Ice::print(os << ", nodes = ", this->nodes);
    Ice::print(os << ", removeNodes = ", this->removeNodes);
}

std::ostream&
IceGrid::operator<<(std::ostream& os, const ::IceGrid::ApplicationUpdateDescriptor& value)
{
    os << "IceGrid::ApplicationUpdateDescriptor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}
