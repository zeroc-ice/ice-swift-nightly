// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'FileParser.ice'.</auto-generated>

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceGrid/FileParser.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::IceGrid::ParseException> iceC_IceGrid_ParseException_init;
}

IceGrid::FileParserPrx::~FileParserPrx() = default;

::IceGrid::ApplicationDescriptor
IceGrid::FileParserPrx::parse(std::string_view iceP_xmlFile, const std::optional<AdminPrx>& iceP_adminProxy, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ApplicationDescriptor>(true, this, &FileParserPrx::_iceI_parse, iceP_xmlFile, iceP_adminProxy, context).get();
}

std::future<::IceGrid::ApplicationDescriptor>
IceGrid::FileParserPrx::parseAsync(std::string_view iceP_xmlFile, const std::optional<AdminPrx>& iceP_adminProxy, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ApplicationDescriptor>(false, this, &FileParserPrx::_iceI_parse, iceP_xmlFile, iceP_adminProxy, context);
}

std::function<void()>
IceGrid::FileParserPrx::parseAsync(std::string_view iceP_xmlFile, const std::optional<AdminPrx>& iceP_adminProxy, std::function<void(::IceGrid::ApplicationDescriptor)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<ApplicationDescriptor>(std::move(response), std::move(exception), std::move(sent), this, &IceGrid::FileParserPrx::_iceI_parse, iceP_xmlFile, iceP_adminProxy, context);
}

void
IceGrid::FileParserPrx::_iceI_parse(const std::shared_ptr<IceInternal::OutgoingAsyncT<ApplicationDescriptor>>& outAsync, std::string_view iceP_xmlFile, const std::optional<AdminPrx>& iceP_adminProxy, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "parse";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_xmlFile, iceP_adminProxy);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const ParseException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        },
        [](Ice::InputStream* istr)
        {
            ApplicationDescriptor ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

const char*
IceGrid::FileParserPrx::ice_staticId() noexcept
{
    return "::IceGrid::FileParser";
}

void
IceGrid::ParseException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "reason = ", this->reason);
}

const char*
IceGrid::ParseException::ice_staticId() noexcept
{
    return "::IceGrid::ParseException";
}

const char*
IceGrid::ParseException::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::ParseException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ParseException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->reason);
    ostr->endSlice();
}

void
IceGrid::ParseException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->reason);
    istr->endSlice();
}

void
IceGrid::FileParser::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "parse"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_parse(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceGrid::FileParser::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceGrid::FileParser"};
    return allTypeIds;
}

std::string
IceGrid::FileParser::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceGrid::FileParser::_iceD_parse(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_xmlFile;
    std::optional<AdminPrx> iceP_adminProxy;
    istr->readAll(iceP_xmlFile, iceP_adminProxy);
    istr->endEncapsulation();
    const ApplicationDescriptor ret = this->parse(std::move(iceP_xmlFile), std::move(iceP_adminProxy), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}

const char*
IceGrid::FileParser::ice_staticId() noexcept
{
    return "::IceGrid::FileParser";
}
