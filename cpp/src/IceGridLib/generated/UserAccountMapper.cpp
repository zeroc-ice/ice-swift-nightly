// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'UserAccountMapper.ice'.</auto-generated>

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceGrid/UserAccountMapper.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::IceGrid::UserAccountNotFoundException> iceC_IceGrid_UserAccountNotFoundException_init;
}

IceGrid::UserAccountMapperPrx::~UserAccountMapperPrx() = default;

std::string
IceGrid::UserAccountMapperPrx::getUserAccount(std::string_view iceP_user, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(true, this, &UserAccountMapperPrx::_iceI_getUserAccount, iceP_user, context).get();
}

std::future<std::string>
IceGrid::UserAccountMapperPrx::getUserAccountAsync(std::string_view iceP_user, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::string>(false, this, &UserAccountMapperPrx::_iceI_getUserAccount, iceP_user, context);
}

std::function<void()>
IceGrid::UserAccountMapperPrx::getUserAccountAsync(std::string_view iceP_user, std::function<void(std::string)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::string>(std::move(response), std::move(exception), std::move(sent), this, &IceGrid::UserAccountMapperPrx::_iceI_getUserAccount, iceP_user, context);
}

void
IceGrid::UserAccountMapperPrx::_iceI_getUserAccount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::string>>& outAsync, std::string_view iceP_user, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getUserAccount";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const UserAccountNotFoundException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

const char*
IceGrid::UserAccountMapperPrx::ice_staticId() noexcept
{
    return "::IceGrid::UserAccountMapper";
}

const char*
IceGrid::UserAccountNotFoundException::ice_staticId() noexcept
{
    return "::IceGrid::UserAccountNotFoundException";
}

const char*
IceGrid::UserAccountNotFoundException::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceGrid::UserAccountNotFoundException::ice_throw() const
{
    throw *this;
}

void
IceGrid::UserAccountNotFoundException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceGrid::UserAccountNotFoundException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

void
IceGrid::UserAccountMapper::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"getUserAccount", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_getUserAccount(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceGrid::UserAccountMapper::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceGrid::UserAccountMapper"};
    return allTypeIds;
}

std::string
IceGrid::UserAccountMapper::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceGrid::UserAccountMapper::_iceD_getUserAccount(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_user;
    istr->readAll(iceP_user);
    istr->endEncapsulation();
    const std::string ret = this->getUserAccount(std::move(iceP_user), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

const char*
IceGrid::UserAccountMapper::ice_staticId() noexcept
{
    return "::IceGrid::UserAccountMapper";
}
