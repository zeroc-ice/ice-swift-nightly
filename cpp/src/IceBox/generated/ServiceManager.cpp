// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'ServiceManager.ice'.</auto-generated>

#ifndef ICEBOX_API_EXPORTS
#   define ICEBOX_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE

#include "IceBox/ServiceManager.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::IceBox::AlreadyStartedException> iceC_IceBox_AlreadyStartedException_init;
    const IceInternal::ExceptionInit<::IceBox::AlreadyStoppedException> iceC_IceBox_AlreadyStoppedException_init;
    const IceInternal::ExceptionInit<::IceBox::NoSuchServiceException> iceC_IceBox_NoSuchServiceException_init;
}

IceBox::ServiceObserverPrx::~ServiceObserverPrx() = default;

void
IceBox::ServiceObserverPrx::servicesStarted(const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceObserverPrx::_iceI_servicesStarted, iceP_services, context).get();
}

std::future<void>
IceBox::ServiceObserverPrx::servicesStartedAsync(const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceObserverPrx::_iceI_servicesStarted, iceP_services, context);
}

std::function<void()>
IceBox::ServiceObserverPrx::servicesStartedAsync(const ::Ice::StringSeq& iceP_services, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceObserverPrx::_iceI_servicesStarted, iceP_services, context);
}

void
IceBox::ServiceObserverPrx::_iceI_servicesStarted(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "servicesStarted";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_services);
        },
        nullptr);
}

void
IceBox::ServiceObserverPrx::servicesStopped(const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceObserverPrx::_iceI_servicesStopped, iceP_services, context).get();
}

std::future<void>
IceBox::ServiceObserverPrx::servicesStoppedAsync(const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceObserverPrx::_iceI_servicesStopped, iceP_services, context);
}

std::function<void()>
IceBox::ServiceObserverPrx::servicesStoppedAsync(const ::Ice::StringSeq& iceP_services, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceObserverPrx::_iceI_servicesStopped, iceP_services, context);
}

void
IceBox::ServiceObserverPrx::_iceI_servicesStopped(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::StringSeq& iceP_services, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "servicesStopped";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_services);
        },
        nullptr);
}

const char*
IceBox::ServiceObserverPrx::ice_staticId() noexcept
{
    return "::IceBox::ServiceObserver";
}

IceBox::ServiceManagerPrx::~ServiceManagerPrx() = default;

void
IceBox::ServiceManagerPrx::startService(std::string_view iceP_service, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceManagerPrx::_iceI_startService, iceP_service, context).get();
}

std::future<void>
IceBox::ServiceManagerPrx::startServiceAsync(std::string_view iceP_service, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceManagerPrx::_iceI_startService, iceP_service, context);
}

std::function<void()>
IceBox::ServiceManagerPrx::startServiceAsync(std::string_view iceP_service, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceManagerPrx::_iceI_startService, iceP_service, context);
}

void
IceBox::ServiceManagerPrx::_iceI_startService(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::string_view iceP_service, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "startService";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_service);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const AlreadyStartedException&)
            {
                throw;
            }
            catch (const NoSuchServiceException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
IceBox::ServiceManagerPrx::stopService(std::string_view iceP_service, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceManagerPrx::_iceI_stopService, iceP_service, context).get();
}

std::future<void>
IceBox::ServiceManagerPrx::stopServiceAsync(std::string_view iceP_service, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceManagerPrx::_iceI_stopService, iceP_service, context);
}

std::function<void()>
IceBox::ServiceManagerPrx::stopServiceAsync(std::string_view iceP_service, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceManagerPrx::_iceI_stopService, iceP_service, context);
}

void
IceBox::ServiceManagerPrx::_iceI_stopService(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::string_view iceP_service, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "stopService";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_service);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const AlreadyStoppedException&)
            {
                throw;
            }
            catch (const NoSuchServiceException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
IceBox::ServiceManagerPrx::addObserver(const std::optional<ServiceObserverPrx>& iceP_observer, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceManagerPrx::_iceI_addObserver, iceP_observer, context).get();
}

std::future<void>
IceBox::ServiceManagerPrx::addObserverAsync(const std::optional<ServiceObserverPrx>& iceP_observer, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceManagerPrx::_iceI_addObserver, iceP_observer, context);
}

std::function<void()>
IceBox::ServiceManagerPrx::addObserverAsync(const std::optional<ServiceObserverPrx>& iceP_observer, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceManagerPrx::_iceI_addObserver, iceP_observer, context);
}

void
IceBox::ServiceManagerPrx::_iceI_addObserver(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<ServiceObserverPrx>& iceP_observer, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "addObserver";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_observer);
        },
        nullptr);
}

void
IceBox::ServiceManagerPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServiceManagerPrx::_iceI_shutdown, context).get();
}

std::future<void>
IceBox::ServiceManagerPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServiceManagerPrx::_iceI_shutdown, context);
}

std::function<void()>
IceBox::ServiceManagerPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceBox::ServiceManagerPrx::_iceI_shutdown, context);
}

void
IceBox::ServiceManagerPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
IceBox::ServiceManagerPrx::ice_staticId() noexcept
{
    return "::IceBox::ServiceManager";
}

const char*
IceBox::AlreadyStartedException::ice_staticId() noexcept
{
    return "::IceBox::AlreadyStartedException";
}

const char*
IceBox::AlreadyStartedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceBox::AlreadyStartedException::ice_throw() const
{
    throw *this;
}

void
IceBox::AlreadyStartedException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceBox::AlreadyStartedException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
IceBox::AlreadyStoppedException::ice_staticId() noexcept
{
    return "::IceBox::AlreadyStoppedException";
}

const char*
IceBox::AlreadyStoppedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceBox::AlreadyStoppedException::ice_throw() const
{
    throw *this;
}

void
IceBox::AlreadyStoppedException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceBox::AlreadyStoppedException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

const char*
IceBox::NoSuchServiceException::ice_staticId() noexcept
{
    return "::IceBox::NoSuchServiceException";
}

const char*
IceBox::NoSuchServiceException::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceBox::NoSuchServiceException::ice_throw() const
{
    throw *this;
}

void
IceBox::NoSuchServiceException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceBox::NoSuchServiceException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

void
IceBox::ServiceObserver::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 6> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "servicesStarted", "servicesStopped"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_servicesStarted(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_servicesStopped(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceBox::ServiceObserver::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceBox::ServiceObserver"};
    return allTypeIds;
}

std::string
IceBox::ServiceObserver::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceBox::ServiceObserver::_iceD_servicesStarted(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Ice::StringSeq iceP_services;
    istr->readAll(iceP_services);
    istr->endEncapsulation();
    this->servicesStarted(std::move(iceP_services), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceBox::ServiceObserver::_iceD_servicesStopped(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Ice::StringSeq iceP_services;
    istr->readAll(iceP_services);
    istr->endEncapsulation();
    this->servicesStopped(std::move(iceP_services), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

const char*
IceBox::ServiceObserver::ice_staticId() noexcept
{
    return "::IceBox::ServiceObserver";
}

void
IceBox::ServiceManager::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"addObserver", "ice_id", "ice_ids", "ice_isA", "ice_ping", "shutdown", "startService", "stopService"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_addObserver(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_startService(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_stopService(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceBox::ServiceManager::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceBox::ServiceManager"};
    return allTypeIds;
}

std::string
IceBox::ServiceManager::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceBox::ServiceManager::_iceD_startService(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_service;
    istr->readAll(iceP_service);
    istr->endEncapsulation();
    this->startService(std::move(iceP_service), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceBox::ServiceManager::_iceD_stopService(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_service;
    istr->readAll(iceP_service);
    istr->endEncapsulation();
    this->stopService(std::move(iceP_service), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceBox::ServiceManager::_iceD_addObserver(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<ServiceObserverPrx> iceP_observer;
    istr->readAll(iceP_observer);
    istr->endEncapsulation();
    this->addObserver(std::move(iceP_observer), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

void
IceBox::ServiceManager::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

const char*
IceBox::ServiceManager::ice_staticId() noexcept
{
    return "::IceBox::ServiceManager";
}
