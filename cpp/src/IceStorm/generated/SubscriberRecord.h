// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'SubscriberRecord.ice'.</auto-generated>
// clang-format off

#ifndef SubscriberRecord_h_
#define SubscriberRecord_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Identity.h>
#include <IceStorm/IceStorm.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceStorm
{
    struct SubscriberRecordKey;

    struct SubscriberRecord;

    using SubscriberRecordSeq = std::vector<SubscriberRecord>;
}

namespace IceStorm
{
    /// The key for persistent subscribers, or topics.
    /// If the subscriber identity is empty then the record is used as a place holder for the creation of a topic,
    /// otherwise the record holds a subscription record.
    struct SubscriberRecordKey
    {
        /// The topic identity.
        ::Ice::Identity topic;

        /// The identity of the subscriber. If this is empty then the key is a placeholder for a topic.
        ::Ice::Identity id;

        /// Creates a tuple with all the fields of this struct.
        /// @return A tuple with all the fields of this struct.
        [[nodiscard]] std::tuple<const ::Ice::Identity&, const ::Ice::Identity&> ice_tuple() const
        {
            return std::tie(topic, id);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        void ice_printFields(std::ostream& os) const;
    };

    /// Outputs the description of a SubscriberRecordKey to a stream, including all its fields.
    /// @param os The output stream.
    /// @param value The instance to output.
    /// @return The output stream.
    std::ostream& operator<<(std::ostream& os, const SubscriberRecordKey& value);

    /// Used to store persistent information for persistent subscribers.
    struct SubscriberRecord
    {
        /// The name of the topic.
        std::string topicName;

        /// The subscriber identity.
        ::Ice::Identity id;

        /// Is this a link record, or a subscriber record?
        bool link;

        /// The subscriber object.
        std::optional<Ice::ObjectPrx> obj;

        /// The QoS.
        ::IceStorm::QoS theQoS;

        /// The cost.
        std::int32_t cost;

        /// The linked topic.
        std::optional<::IceStorm::TopicPrx> theTopic;

        /// Creates a tuple with all the fields of this struct.
        /// @return A tuple with all the fields of this struct.
        [[nodiscard]] std::tuple<const std::string&, const ::Ice::Identity&, const bool&, const std::optional<Ice::ObjectPrx>&, const ::IceStorm::QoS&, const std::int32_t&, const std::optional<::IceStorm::TopicPrx>&> ice_tuple() const
        {
            return std::tie(topicName, id, link, obj, theQoS, cost, theTopic);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        void ice_printFields(std::ostream& os) const;
    };

    /// Outputs the description of a SubscriberRecord to a stream, including all its fields.
    /// @param os The output stream.
    /// @param value The instance to output.
    /// @return The output stream.
    std::ostream& operator<<(std::ostream& os, const SubscriberRecord& value);

    /// @cond INTERNAL
    using Ice::Tuple::operator<;
    using Ice::Tuple::operator<=;
    using Ice::Tuple::operator>;
    using Ice::Tuple::operator>=;
    using Ice::Tuple::operator==;
    using Ice::Tuple::operator!=;
    /// @endcond
}

namespace Ice
{
    /// @cond INTERNAL
    template<>
    struct StreamableTraits<::IceStorm::SubscriberRecordKey>
    {
        static constexpr StreamHelperCategory helper = StreamHelperCategoryStruct;
        static constexpr int minWireSize = 4;
        static constexpr bool fixedLength = false;
    };

    template<>
    struct StreamReader<::IceStorm::SubscriberRecordKey>
    {
        /// Unmarshals a ::IceStorm::SubscriberRecordKey from the input stream.
        static void read(InputStream* istr, ::IceStorm::SubscriberRecordKey& v)
        {
            istr->readAll(v.topic, v.id);
        }
    };
    /// @endcond

    /// @cond INTERNAL
    template<>
    struct StreamableTraits<::IceStorm::SubscriberRecord>
    {
        static constexpr StreamHelperCategory helper = StreamHelperCategoryStruct;
        static constexpr int minWireSize = 13;
        static constexpr bool fixedLength = false;
    };

    template<>
    struct StreamReader<::IceStorm::SubscriberRecord>
    {
        /// Unmarshals a ::IceStorm::SubscriberRecord from the input stream.
        static void read(InputStream* istr, ::IceStorm::SubscriberRecord& v)
        {
            istr->readAll(v.topicName, v.id, v.link, v.obj, v.theQoS, v.cost, v.theTopic);
        }
    };
    /// @endcond
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
