// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'LLURecord.ice'.</auto-generated>
// clang-format off

#ifndef LLURecord_h_
#define LLURecord_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceStormElection
{
    struct LogUpdate;
}

namespace IceStormElection
{
    /// A struct used for marking the last log update.
    struct LogUpdate
    {
        /// The generation.
        std::int64_t generation;

        /// The iteration within this generation.
        std::int64_t iteration;

        /// Creates a tuple with all the fields of this struct.
        /// @return A tuple with all the fields of this struct.
        [[nodiscard]] std::tuple<const std::int64_t&, const std::int64_t&> ice_tuple() const
        {
            return std::tie(generation, iteration);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        void ice_printFields(std::ostream& os) const;
    };

    /// Outputs the description of a LogUpdate to a stream, including all its fields.
    /// @param os The output stream.
    /// @param value The instance to output.
    /// @return The output stream.
    std::ostream& operator<<(std::ostream& os, const LogUpdate& value);

    /// @cond INTERNAL
    using Ice::Tuple::operator<;
    using Ice::Tuple::operator<=;
    using Ice::Tuple::operator>;
    using Ice::Tuple::operator>=;
    using Ice::Tuple::operator==;
    using Ice::Tuple::operator!=;
    /// @endcond
}

namespace Ice
{
    /// @cond INTERNAL
    template<>
    struct StreamableTraits<::IceStormElection::LogUpdate>
    {
        static constexpr StreamHelperCategory helper = StreamHelperCategoryStruct;
        static constexpr int minWireSize = 16;
        static constexpr bool fixedLength = true;
    };

    template<>
    struct StreamReader<::IceStormElection::LogUpdate>
    {
        /// Unmarshals a ::IceStormElection::LogUpdate from the input stream.
        static void read(InputStream* istr, ::IceStormElection::LogUpdate& v)
        {
            istr->readAll(v.generation, v.iteration);
        }
    };
    /// @endcond
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
