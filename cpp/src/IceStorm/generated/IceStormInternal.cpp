// Copyright (c) ZeroC, Inc.

// slice2cpp version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'IceStormInternal.ice'.</auto-generated>

#define ICE_BUILDING_GENERATED_CODE

#include "IceStormInternal.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/DefaultSliceLoader.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_DISABLE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::ExceptionInit<::IceStorm::ReapWouldBlock> iceC_IceStorm_ReapWouldBlock_init;
}

IceStorm::TopicLinkPrx::~TopicLinkPrx() = default;

void
IceStorm::TopicLinkPrx::forward(const EventDataSeq& iceP_events, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicLinkPrx::_iceI_forward, iceP_events, context).get();
}

std::future<void>
IceStorm::TopicLinkPrx::forwardAsync(const EventDataSeq& iceP_events, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicLinkPrx::_iceI_forward, iceP_events, context);
}

std::function<void()>
IceStorm::TopicLinkPrx::forwardAsync(const EventDataSeq& iceP_events, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicLinkPrx::_iceI_forward, iceP_events, context);
}

void
IceStorm::TopicLinkPrx::_iceI_forward(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const EventDataSeq& iceP_events, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "forward";

    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_events);
        },
        nullptr);
}

const char*
IceStorm::TopicLinkPrx::ice_staticId() noexcept
{
    return "::IceStorm::TopicLink";
}

IceStorm::TopicInternalPrx::~TopicInternalPrx() = default;

std::optional<::IceStorm::TopicLinkPrx>
IceStorm::TopicInternalPrx::getLinkProxy(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicLinkPrx>>(true, this, &TopicInternalPrx::_iceI_getLinkProxy, context).get();
}

std::future<std::optional<::IceStorm::TopicLinkPrx>>
IceStorm::TopicInternalPrx::getLinkProxyAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<TopicLinkPrx>>(false, this, &TopicInternalPrx::_iceI_getLinkProxy, context);
}

std::function<void()>
IceStorm::TopicInternalPrx::getLinkProxyAsync(std::function<void(std::optional<::IceStorm::TopicLinkPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<TopicLinkPrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicInternalPrx::_iceI_getLinkProxy, context);
}

void
IceStorm::TopicInternalPrx::_iceI_getLinkProxy(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<TopicLinkPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getLinkProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

void
IceStorm::TopicInternalPrx::reap(const ::Ice::IdentitySeq& iceP_id, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TopicInternalPrx::_iceI_reap, iceP_id, context).get();
}

std::future<void>
IceStorm::TopicInternalPrx::reapAsync(const ::Ice::IdentitySeq& iceP_id, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TopicInternalPrx::_iceI_reap, iceP_id, context);
}

std::function<void()>
IceStorm::TopicInternalPrx::reapAsync(const ::Ice::IdentitySeq& iceP_id, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicInternalPrx::_iceI_reap, iceP_id, context);
}

void
IceStorm::TopicInternalPrx::_iceI_reap(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::IdentitySeq& iceP_id, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "reap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Normal,
        std::nullopt,
        context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const ReapWouldBlock&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

const char*
IceStorm::TopicInternalPrx::ice_staticId() noexcept
{
    return "::IceStorm::TopicInternal";
}

IceStorm::TopicManagerInternalPrx::~TopicManagerInternalPrx() = default;

std::optional<::IceStormElection::NodePrx>
IceStorm::TopicManagerInternalPrx::getReplicaNode(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<::IceStormElection::NodePrx>>(true, this, &TopicManagerInternalPrx::_iceI_getReplicaNode, context).get();
}

std::future<std::optional<::IceStormElection::NodePrx>>
IceStorm::TopicManagerInternalPrx::getReplicaNodeAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<::IceStormElection::NodePrx>>(false, this, &TopicManagerInternalPrx::_iceI_getReplicaNode, context);
}

std::function<void()>
IceStorm::TopicManagerInternalPrx::getReplicaNodeAsync(std::function<void(std::optional<::IceStormElection::NodePrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<::IceStormElection::NodePrx>>(std::move(response), std::move(exception), std::move(sent), this, &IceStorm::TopicManagerInternalPrx::_iceI_getReplicaNode, context);
}

void
IceStorm::TopicManagerInternalPrx::_iceI_getReplicaNode(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<::IceStormElection::NodePrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getReplicaNode";

    _checkTwowayOnly(operationName);
    outAsync->invoke(
        operationName,
        Ice::OperationMode::Idempotent,
        std::nullopt,
        context,
        nullptr,
        nullptr);
}

const char*
IceStorm::TopicManagerInternalPrx::ice_staticId() noexcept
{
    return "::IceStorm::TopicManagerInternal";
}

void
IceStorm::EventData::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "op = ", this->op);
    Ice::print(os << ", mode = ", this->mode);
    Ice::print(os << ", data = ", this->data);
    Ice::print(os << ", context = ", this->context);
}

std::ostream&
IceStorm::operator<<(std::ostream& os, const ::IceStorm::EventData& value)
{
    os << "IceStorm::EventData{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
IceStorm::ReapWouldBlock::ice_staticId() noexcept
{
    return "::IceStorm::ReapWouldBlock";
}

const char*
IceStorm::ReapWouldBlock::ice_id() const noexcept
{
    return ice_staticId();
}

void
IceStorm::ReapWouldBlock::ice_throw() const
{
    throw *this;
}

void
IceStorm::ReapWouldBlock::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
IceStorm::ReapWouldBlock::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

void
IceStorm::TopicLink::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"forward", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_forward(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::TopicLink::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::TopicLink"};
    return allTypeIds;
}

std::string
IceStorm::TopicLink::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::TopicLink::_iceD_forward(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    EventDataSeq iceP_events;
    istr->readAll(iceP_events);
    istr->endEncapsulation();
    this->forward(std::move(iceP_events), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

const char*
IceStorm::TopicLink::ice_staticId() noexcept
{
    return "::IceStorm::TopicLink";
}

void
IceStorm::TopicInternal::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 16> allOperations{"destroy", "getLinkInfoSeq", "getLinkProxy", "getName", "getNonReplicatedPublisher", "getPublisher", "getSubscribers", "ice_id", "ice_ids", "ice_isA", "ice_ping", "link", "reap", "subscribeAndGetPublisher", "unlink", "unsubscribe"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_destroy(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getLinkInfoSeq(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getLinkProxy(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_getName(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_getNonReplicatedPublisher(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_getPublisher(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_getSubscribers(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_link(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_reap(request, std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_subscribeAndGetPublisher(request, std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_unlink(request, std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_unsubscribe(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::TopicInternal::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::Topic", "::IceStorm::TopicInternal"};
    return allTypeIds;
}

std::string
IceStorm::TopicInternal::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::TopicInternal::_iceD_getLinkProxy(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<TopicLinkPrx> ret = this->getLinkProxy(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

void
IceStorm::TopicInternal::_iceD_reap(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    checkNonIdempotent(request.current());
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Ice::IdentitySeq iceP_id;
    istr->readAll(iceP_id);
    istr->endEncapsulation();
    this->reap(std::move(iceP_id), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}

const char*
IceStorm::TopicInternal::ice_staticId() noexcept
{
    return "::IceStorm::TopicInternal";
}

void
IceStorm::TopicManagerInternal::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"create", "getReplicaNode", "ice_id", "ice_ids", "ice_isA", "ice_ping", "retrieve", "retrieveAll"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_create(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getReplicaNode(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_retrieve(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_retrieveAll(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
IceStorm::TopicManagerInternal::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::IceStorm::TopicManager", "::IceStorm::TopicManagerInternal"};
    return allTypeIds;
}

std::string
IceStorm::TopicManagerInternal::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

void
IceStorm::TopicManagerInternal::_iceD_getReplicaNode(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<::IceStormElection::NodePrx> ret = this->getReplicaNode(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}

const char*
IceStorm::TopicManagerInternal::ice_staticId() noexcept
{
    return "::IceStorm::TopicManagerInternal";
}
